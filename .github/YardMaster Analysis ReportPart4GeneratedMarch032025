YardMaster Analysis ReportPart4GeneratedMarch032025
Generated: March 03, 2025  
Repository Structure
ai.redlionsalvage.net/
├── .gitignore
├── LICENSE
├── README.md
├── composer.json
├── composer.lock
├── index.php
├── .github/
│   ├── workflows/
│   │   ├── deploy.yml
│   ├── YardMaster_Analysis_Report.md
├── ai.redlionsalvage.net/
│   ├── api/
│   │   ├── employee_management/
│   │   │   ├── add_employee.php
│   │   │   ├── delete_employee.php
│   │   │   ├── get_employees.php
│   │   │   ├── suspend_employee.php
│   │   │   ├── update_employee.php
│   │   ├── fleet/
│   │   │   ├── add_vehicle.php
│   │   │   ├── assign_driver.php
│   │   │   ├── check expirations.php
│   │   │   ├── get_driver_history.php
│   │   │   ├── get_fleet_vehicles.php
│   │   │   ├── ocr_receipt.py
│   │   │   ├── update_mileage.php
│   │   │   ├── upload_document.php
│   │   │   ├── upload_receipt.php
│   │   ├── inventory/
│   │   │   ├── get_parts.php
│   │   │   ├── get_vehicles.php
│   │   ├── pos/
│   │   │   ├── open_drawer.php
│   │   │   ├── print_receipt.php
│   │   │   ├── record_sale.php
│   │   ├── scrap/
│   │   │   ├── record_purchase.php
│   │   ├── timeclock/
│   │   │   ├── add_extra_time.php
│   │   │   ├── end_break.php
│   │   │   ├── get_employee_status.php
│   │   │   ├── get_extra_time.php
│   │   │   ├── get_time_log.php
│   │   │   ├── get_time_status.php
│   │   │   ├── get_yardman_stats.php
│   │   │   ├── log_extra_time.php
│   │   │   ├── start_break.php
│   │   ├── vehicle_pickup/
│   │   │   ├── get_pending_vehicles.php
│   │   │   ├── process_pending.php
│   │   │   ├── submit_pending.php
│   │   ├── config.php
│   │   ├── employee.php
│   │   ├── get_user_roles.php
│   │   ├── login.php
│   │   ├── logout.php
│   │   ├── timeclock.php
│   │   ├── vehicle_mangement.php
├── api/
│   ├── employee_management/
│   │   ├── add_employee.php
│   │   ├── delete_employee.php
│   │   ├── get_employees.php
│   │   ├── suspend_employee.php
│   │   ├── update_employee.php
│   ├── fleet/
│   │   ├── add_vehicle.php
│   │   ├── assign_driver.php
│   │   ├── check expirations.php
│   │   ├── documents.php
│   │   ├── get_driver_history.php
│   │   ├── get_fleet_vehicles.php
│   │   ├── ocr_receipt.py
│   │   ├── update_mileage.php
│   │   ├── upload_document.php
│   │   ├── upload_receipt.php
│   │   ├── vehicles.php
├── database/
│   ├── schema.sql
[Truncated—full structure as you provided]  
File Contents
File: lib/fpdf.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/lib/fpdf.php]
<?php
/*******************************************************************************  
FPDF                                                                         *  

                                                                         *  

Version: 1.86                                                                *  

Date:    2023-06-25                                                          *  

Author:  Olivier PLATHEY                                                     *
*******************************************************************************/

define('FPDF_VERSION','1.86');  
class FPDF
{
protected $page;
protected $n;
protected $offsets;
protected $buffer;
protected $pages;
protected $state;
protected $compress;
protected $k;
protected $DefOrientation;
protected $CurOrientation;
protected $StdPageSizes;
protected $DefPageSize;
protected $CurPageSize;
protected $CurRotation;
protected $PageInfo;
protected $wPt, $hPt;
protected $w, $h;
protected $lMargin;
protected $tMargin;
protected $rMargin;
protected $bMargin;
protected $cMargin;
protected $x, $y;
protected $lasth;
protected $LineWidth;
protected $fontpath;
protected $CoreFonts;
protected $fonts;
protected $FontFiles;
protected $encodings;
protected $cmaps;
protected $FontFamily;
protected $FontStyle;
protected $underline;
protected $CurrentFont;
protected $FontSizePt;
protected $FontSize;
protected $DrawColor;
protected $FillColor;
protected $TextColor;
protected $ColorFlag;
protected $WithAlpha;
protected $ws;
protected $images;
protected $PageLinks;
protected $links;
protected $AutoPageBreak;
protected $PageBreakTrigger;
protected $InHeader;
protected $InFooter;
protected $AliasNbPages;
protected $ZoomMode;
protected $LayoutMode;
protected $metadata;
protected $CreationDate;
protected $PDFVersion;  
function __construct($orientation='P', $unit='mm', $size='A4')
{
    $this->state = 0;
    $this->page = 0;
    $this->n = 2;
    $this->buffer = '';
    $this->pages = array();
    $this->PageLinks = array();
    $this->offsets = array();
    $this->fonts = array();
    $this->FontFiles = array();
    $this->images = array();
    $this->links = array();
    $this->InHeader = false;
    $this->InFooter = false;
    $this->lasth = 0;
    $this->FontFamily = '';
    $this->FontStyle = '';
    $this->FontSizePt = 12;
    $this->underline = false;
    $this->DrawColor = '0 G';
    $this->FillColor = '0 g';
    $this->TextColor = '0 g';
    $this->ColorFlag = false;
    $this->ws = 0;
    if($unit=='pt')
        $this->k = 1;
    elseif($unit=='mm')
        $this->k = 72/25.4;
    elseif($unit=='cm')
        $this->k = 72/2.54;
    elseif($unit=='in')
        $this->k = 72;
    else
        $this->Error('Incorrect unit: '.$unit);
    $this->StdPageSizes = array('a3'=>array(841.89,1190.55), 'a4'=>array(595.28,841.89), 'a5'=>array(420.94,595.28),
        'letter'=>array(612,792), 'legal'=>array(612,1008));
    $size = $this->_getpagesize($size);
    $this->DefPageSize = $size;
    $this->CurPageSize = $size;
    if($orientation=='P' || $orientation=='Portrait')
    {
        $this->DefOrientation = 'P';
        $this->w = $size[0];
        $this->h = $size[1];
    }
    else
    {
        $this->DefOrientation = 'L';
        $this->w = $size[1];
        $this->h = $size[0];
    }
    $this->CurOrientation = $this->DefOrientation;
    $this->wPt = $this->w*$this->k;
    $this->hPt = $this->h*$this->k;
    $margin = 28.35/$this->k;
    $this->SetMargins($margin,$margin);
    $this->cMargin = $margin/2;
    $this->LineWidth = .567/$this->k;
    $this->fontpath = dirname(FILE).'/font/';
    $this->CoreFonts = array('courier', 'helvetica', 'times', 'symbol', 'zapfdingbats');
    $this->PDFVersion = '1.7';
}  
function SetMargins($left, $top, $right=null)
{
    $this->lMargin = $left;
    $this->tMargin = $top;
    if($right===null)
        $right = $left;
    $this->rMargin = $right;
}  
function SetLeftMargin($margin)
{
    $this->lMargin = $margin;
    if($this->page>0 && $this->x<$margin)
        $this->x = $margin;
}  
function SetTopMargin($margin)
{
    $this->tMargin = $margin;
}  
function SetRightMargin($margin)
{
    $this->rMargin = $margin;
}  
function SetAutoPageBreak($auto, $margin=0)
{
    $this->AutoPageBreak = $auto;
    $this->bMargin = $margin;
    $this->PageBreakTrigger = $this->h-$margin;
}  
function SetDisplayMode($zoom, $layout='default')
{
    if($zoom=='fullpage' || $zoom=='fullwidth' || $zoom=='real' || $zoom=='default' || !is_string($zoom))
        $this->ZoomMode = $zoom;
    else
        $this->Error('Incorrect zoom display mode: '.$zoom);
    if($layout=='single' || $layout=='continuous' || $layout=='two' || $layout=='default')
        $this->LayoutMode = $layout;
    else
        $this->Error('Incorrect layout display mode: '.$layout);
}  
function SetCompression($compress)
{
    $this->compress = $compress;
}  
function SetTitle($title, $isUTF8=false)
{
    if($isUTF8)
        $title = $this->_UTF8toUTF16($title);
    $this->metadata['Title'] = $title;
}  
function SetAuthor($author, $isUTF8=false)
{
    if($isUTF8)
        $author = $this->_UTF8toUTF16($author);
    $this->metadata['Author'] = $author;
}  
function SetSubject($subject, $isUTF8=false)
{
    if($isUTF8)
        $subject = $this->_UTF8toUTF16($subject);
    $this->metadata['Subject'] = $subject;
}  
function SetKeywords($keywords, $isUTF8=false)
{
    if($isUTF8)
        $keywords = $this->_UTF8toUTF16($keywords);
    $this->metadata['Keywords'] = $keywords;
}  
function SetCreator($creator, $isUTF8=false)
{
    if($isUTF8)
        $creator = $this->_UTF8toUTF16($creator);
    $this->metadata['Creator'] = $creator;
}  
function AliasNbPages($alias='{nb}')
{
    $this->AliasNbPages = $alias;
}  
function Error($msg)
{
    die('<b>FPDF error:</b> '.$msg);
}  
function Close()
{
    if($this->state==3)
        return;
    if($this->page==0)
        $this->AddPage();
    $this->InFooter = true;
    $this->Footer();
    $this->InFooter = false;
    $this->_endpage();
    $this->_enddoc();
}  
function AddPage($orientation='', $size='', $rotation=0)
{
    if($this->state==3)
        $this->Error('The document is closed');
    $family = $this->FontFamily;
    $style = $this->FontStyle.($this->underline ? 'U' : '');
    $fontsize = $this->FontSizePt;
    $lw = $this->LineWidth;
    $dc = $this->DrawColor;
    $fc = $this->FillColor;
    $tc = $this->TextColor;
    $cf = $this->ColorFlag;
    if($this->page>0)
    {
        $this->InFooter = true;
        $this->Footer();
        $this->InFooter = false;
        $this->_endpage();
    }
    $this->_beginpage($orientation,$size,$rotation);
    $this->_out('2 J');
    $this->LineWidth = $lw;
    $this->_out(sprintf('%.2F w',$lw*$this->k));
    if($family)
        $this->SetFont($family,$style,$fontsize);
    $this->DrawColor = $dc;
    if($dc!='0 G')
        $this->_out($dc);
    $this->FillColor = $fc;
    if($fc!='0 g')
        $this->_out($fc);
    $this->TextColor = $tc;
    $this->ColorFlag = $cf;
    $this->InHeader = true;
    $this->Header();
    $this->InHeader = false;
    if($this->LineWidth!=$lw)
    {
        $this->LineWidth = $lw;
        $this->_out(sprintf('%.2F w',$lw*$this->k));
    }
    if($family)
        $this->SetFont($family,$style,$fontsize);
}  
function Header()
{
}  
function Footer()
{
}  
function PageNo()
{
    return $this->page;
}  
function SetDrawColor($r, $g=null, $b=null)
{
    if(($r==0 && $g==0 && $b==0) || $g===null)
        $this->DrawColor = sprintf('%.3F G',$r/255);
    else
        $this->DrawColor = sprintf('%.3F %.3F %.3F RG',$r/255,$g/255,$b/255);
    if($this->page>0)
        $this->_out($this->DrawColor);
}  
function SetFillColor($r, $g=null, $b=null)
{
    if(($r==0 && $g==0 && $b==0) || $g===null)
        $this->FillColor = sprintf('%.3F g',$r/255);
    else
        $this->FillColor = sprintf('%.3F %.3F %.3F rg',$r/255,$g/255,$b/255);
    $this->ColorFlag = ($this->FillColor!=$this->TextColor);
    if($this->page>0)
        $this->_out($this->FillColor);
}  
function SetTextColor($r, $g=null, $b=null)
{
    if(($r==0 && $g==0 && $b==0) || $g===null)
        $this->TextColor = sprintf('%.3F g',$r/255);
    else
        $this->TextColor = sprintf('%.3F %.3F %.3F rg',$r/255,$g/255,$b/255);
    $this->ColorFlag = ($this->FillColor!=$this->TextColor);
}  
function GetPageWidth()
{
    return $this->w;
}  
function GetPageHeight()
{
    return $this->h;
}  
function SetLineWidth($width)
{
    $this->LineWidth = $width;
    if($this->page>0)
        $this->_out(sprintf('%.2F w',$width*$this->k));
}  
function Line($x1, $y1, $x2, $y2)
{
    $this->_out(sprintf('%.2F %.2F m %.2F %.2F l S',$x1*$this->k,($this->h-$y1)$this->k,$x2$this->k,($this->h-$y2)*$this->k));
}  
function Rect($x, $y, $w, $h, $style='')
{
    if($style=='F')
        $op = 'f';
    elseif($style=='FD' || $style=='DF')
        $op = 'B';
    else
        $op = 'S';
    $this->_out(sprintf('%.2F %.2F %.2F %.2F re %s',$x*$this->k,($this->h-$y)$this->k,$w$this->k,-$h*$this->k,$op));
}  
function AddFont($family, $style='', $file='')
{
    $family = strtolower($family);
    if($file=='')
        $file = str_replace(' ','',$family).strtolower($style).'.php';
    $style = strtoupper($style);
    if($style=='IB')
        $style = 'BI';
    $fontkey = $family.$style;
    if(isset($this->fonts[$fontkey]))
        return;
    $info = $this->_loadfont($file);
    $info['i'] = count($this->fonts)+1;
    if(!empty($info['file']))
    {
        $this->FontFiles[$info['file']] = array('length1'=>$info['length1'], 'length2'=>$info['length2']);
    }
    $this->fonts[$fontkey] = $info;
}  
function SetFont($family, $style='', $size=0)
{
    if($family=='')
        $family = $this->FontFamily;
    else
        $family = strtolower($family);
    $style = strtoupper($style);
    if(strpos($style,'U')!==false)
    {
        $this->underline = true;
        $style = str_replace('U','',$style);
    }
    else
        $this->underline = false;
    if($style=='IB')
        $style = 'BI';
    if($size==0)
        $size = $this->FontSizePt;
    if($this->FontFamily==$family && $this->FontStyle==$style && $this->FontSizePt==$size)
        return;
    $fontkey = $family.$style;
    if(!isset($this->fonts[$fontkey]))
    {
        if($family=='arial')
            $family = 'helvetica';
        if(in_array($family,$this->CoreFonts))
        {
            if($family=='symbol' || $family=='zapfdingbats')
                $style = '';
            $fontkey = $family.$style;
            if(!isset($this->fonts[$fontkey]))
                $this->AddFont($family,$style);
        }
        else
            $this->Error('Undefined font: '.$family.' '.$style);
    }
    $this->FontFamily = $family;
    $this->FontStyle = $style;
    $this->FontSizePt = $size;
    $this->FontSize = $size/$this->k;
    $this->CurrentFont = &$this->fonts[$fontkey];
    if($this->page>0)
        $this->_out(sprintf('BT /F%d %.2F Tf ET',$this->CurrentFont['i'],$this->FontSizePt));
}  
function SetFontSize($size)
{
    if($this->FontSizePt==$size)
        return;
    $this->FontSizePt = $size;
    $this->FontSize = $size/$this->k;
    if($this->page>0)
        $this->_out(sprintf('BT /F%d %.2F Tf ET',$this->CurrentFont['i'],$this->FontSizePt));
}  
function AddLink()
{
    $n = count($this->links)+1;
    $this->links[$n] = array(0,0);
    return $n;
}  
function SetLink($link, $y=0, $page=-1)
{
    if($y==-1)
        $y = $this->y;
    if($page==-1)
        $page = $this->page;
    $this->links[$link] = array($page,$y);
}  
function Link($x, $y, $w, $h, $link)
{
    $this->PageLinks[$this->page][] = array($x*$this->k,$this->hPt-$y*$this->k,$w*$this->k,$h*$this->k,$link);
}  
function Text($x, $y, $txt)
{
    $s = sprintf('BT %.2F %.2F Td (%s) Tj ET',$x*$this->k,($this->h-$y)*$this->k,$this->_escape($txt));
    if($this->underline && $txt!='')
        $s .= ' '.$this->_dounderline($x,$y,$txt);
    if($this->ColorFlag)
        $s = 'q '.$this->TextColor.' '.$s.' Q';
    $this->_out($s);
}  
function AcceptPageBreak()
{
    return $this->AutoPageBreak;
}  
function Cell($w, $h=0, $txt='', $border=0, $ln=0, $align='', $fill=false, $link='')
{
    $k = $this->k;
    if($this->y+$h>$this->PageBreakTrigger && !$this->InHeader && !$this->InFooter && $this->AcceptPageBreak())
    {
        $x = $this->x;
        $ws = $this->ws;
        if($ws>0)
        {
            $this->ws = 0;
            $this->_out('0 Tw');
        }
        $this->AddPage($this->CurOrientation,$this->CurPageSize,$this->CurRotation);
        $this->x = $x;
        if($ws>0)
        {
            $this->ws = $ws;
            $this->_out(sprintf('%.3F Tw',$ws*$k));
        }
    }
    if($w==0)
        $w = $this->w-$this->rMargin-$this->x;
    $s = '';
    if($fill || $border==1)
    {
        if($fill)
            $op = ($border==1) ? 'B' : 'f';
        else
            $op = 'S';
        $s = sprintf('%.2F %.2F %.2F %.2F re %s ',$this->x*$k,($this->h-$this->y)$k,$w$k,-$h*$k,$op);
    }
    if(is_string($border))
    {
        $x = $this->x;
        $y = $this->y;
        if(strpos($border,'L')!==false)
            $s .= sprintf('%.2F %.2F m %.2F %.2F l S ',$x*$k,($this->h-$y)$k,$x$k,($this->h-($y+$h))$k);
        if(strpos($border,'T')!==false)
            $s .= sprintf('%.2F %.2F m %.2F %.2F l S ',$x$k,($this->h-$y)$k,($x+$w)$k,($this->h-$y)$k);
        if(strpos($border,'R')!==false)
            $s .= sprintf('%.2F %.2F m %.2F %.2F l S ',($x+$w)$k,($this->h-$y)$k,($x+$w)$k,($this->h-($y+$h))$k);
        if(strpos($border,'B')!==false)
            $s .= sprintf('%.2F %.2F m %.2F %.2F l S ',$x$k,($this->h-($y+$h))$k,($x+$w)$k,($this->h-($y+$h))$k);
    }
    if($txt!=='')
    {
        if(!isset($this->CurrentFont))
            $this->Error('No font has been set');
        if($align=='R')
            $dx = $w-$this->cMargin-$this->GetStringWidth($txt);
        elseif($align=='C')
            $dx = ($w-$this->GetStringWidth($txt))/2;
        else
            $dx = $this->cMargin;
        if($this->ColorFlag)
            $s .= 'q '.$this->TextColor.' ';
        $txt2 = $this->_escape($txt);
        $s .= sprintf('BT %.2F %.2F Td (%s) Tj ET',($this->x+$dx)$k,($this->h-($this->y+.5*$h+.3*$this->FontSize))$k,$txt2);
        if($this->underline)
            $s .= ' '.$this->_dounderline($this->x+$dx,$this->y+.5$h+.3*$this->FontSize,$txt);
        if($this->ColorFlag)
            $s .= ' Q';
        if($link)
            $this->Link($this->x+$dx,$this->y+.5*$h-.5*$this->FontSize,$this->GetStringWidth($txt),$this->FontSize,$link);
    }
    if($s)
        $this->_out($s);
    $this->lasth = $h;
    if($ln>0)
    {
        $this->y += $h;
        if($ln==1)
            $this->x = $this->lMargin;
    }
    else
        $this->x += $w;
}  
function MultiCell($w, $h, $txt, $border=0, $align='J', $fill=false)
{
    if(!isset($this->CurrentFont))
        $this->Error('No font has been set');
    $cw = &$this->CurrentFont['cw'];
    if($w==0)
        $w = $this->w-$this->rMargin-$this->x;
    $wmax = ($w-2*$this->cMargin)1000/$this->FontSize;
    $s = str_replace("\r",'',$txt);
    $nb = strlen($s);
    if($nb>0 && $s[$nb-1]=="\n")
        $nb--;
    $b = 0;
    if($border)
    {
        if($border==1)
        {
            $border = 'LTRB';
            $b = 'LRT';
            $b2 = 'LR';
        }
        else
        {
            $b2 = '';
            if(strpos($border,'L')!==false)
                $b2 .= 'L';
            if(strpos($border,'R')!==false)
                $b2 .= 'R';
            $b = (strpos($border,'T')!==false) ? $b2.'T' : $b2;
        }
    }
    $sep = -1;
    $i = 0;
    $j = 0;
    $l = 0;
    $ns = 0;
    $nl = 1;
    while($i<$nb)
    {
        $c = $s[$i];
        if($c=="\n")
        {
            if($this->ws>0)
            {
                $this->ws = 0;
                $this->_out('0 Tw');
            }
            $this->Cell($w,$h,substr($s,$j,$i-$j),$b,2,$align,$fill);
            $i++;
            $sep = -1;
            $j = $i;
            $l = 0;
            $ns = 0;
            $nl++;
            if($border && $nl==2)
                $b = $b2;
            continue;
        }
        if($c==' ')
        {
            $sep = $i;
            $ls = $l;
            $ns++;
        }
        $l += $cw[$c];
        if($l>$wmax)
        {
            if($sep==-1)
            {
                if($i==$j)
                    $i++;
                if($this->ws>0)
                {
                    $this->ws = 0;
                    $this->_out('0 Tw');
                }
                $this->Cell($w,$h,substr($s,$j,$i-$j),$b,2,$align,$fill);
            }
            else
            {
                if($align=='J')
                {
                    $this->ws = ($ns>1) ? ($wmax-$ls)/1000$this->FontSize/($ns-1) : 0;
                    $this->_out(sprintf('%.3F Tw',$this->ws*$this->k));
                }
                $this->Cell($w,$h,substr($s,$j,$sep-$j),$b,2,$align,$fill);
                $i = $sep+1;
            }
            $sep = -1;
            $j = $i;
            $l = 0;
            $ns = 0;
            $nl++;
            if($border && $nl==2)
                $b = $b2;
        }
        else
            $i++;
    }
    if($this->ws>0)
    {
        $this->ws = 0;
        $this->_out('0 Tw');
    }
    if($border && strpos($border,'B')!==false)
        $b .= 'B';
    $this->Cell($w,$h,substr($s,$j,$i-$j),$b,2,$align,$fill);
    $this->x = $this->lMargin;
}  
function Write($h, $txt, $link='')
{
    if(!isset($this->CurrentFont))
        $this->Error('No font has been set');
    $cw = &$this->CurrentFont['cw'];
    $w = $this->w-$this->rMargin-$this->x;
    $wmax = ($w-2*$this->cMargin)1000/$this->FontSize;
    $s = str_replace("\r",'',$txt);
    $nb = strlen($s);
    $sep = -1;
    $i = 0;
    $j = 0;
    $l = 0;
    $nl = 1;
    while($i<$nb)
    {
        $c = $s[$i];
        if($c=="\n")
        {
            $this->Cell($w,$h,substr($s,$j,$i-$j),0,2,'',false,$link);
            $i++;
            $sep = -1;
            $j = $i;
            $l = 0;
            if($nl==1)
            {
                $this->x = $this->lMargin;
                $w = $this->w-$this->rMargin-$this->x;
                $wmax = ($w-2$this->cMargin)1000/$this->FontSize;
            }
            $nl++;
            continue;
        }
        if($c==' ')
            $sep = $i;
        $l += $cw[$c];
        if($l>$wmax)
        {
            if($sep==-1)
            {
                if($this->x>$this->lMargin)
                {
                    $this->x = $this->lMargin;
                    $this->y += $h;
                    $w = $this->w-$this->rMargin-$this->x;
                    $wmax = ($w-2$this->cMargin)1000/$this->FontSize;
                    $i++;
                    $nl++;
                    continue;
                }
                if($i==$j)
                    $i++;
                $this->Cell($w,$h,substr($s,$j,$i-$j),0,2,'',false,$link);
            }
            else
            {
                $this->Cell($w,$h,substr($s,$j,$sep-$j),0,2,'',false,$link);
                $i = $sep+1;
            }
            $sep = -1;
            $j = $i;
            $l = 0;
            if($nl==1)
            {
                $this->x = $this->lMargin;
                $w = $this->w-$this->rMargin-$this->x;
                $wmax = ($w-2$this->cMargin)1000/$this->FontSize;
            }
            $nl++;
        }
        else
            $i++;
    }
    if($i!=$j)
        $this->Cell($l/1000$this->FontSize,$h,substr($s,$j),0,0,'',false,$link);
}  
function Ln($h=null)
{
    $this->x = $this->lMargin;
    if($h===null)
        $this->y += $this->lasth;
    else
        $this->y += $h;
}  
function Image($file, $x=null, $y=null, $w=0, $h=0, $type='', $link='')
{
    if(!isset($this->images[$file]))
    {
        if($type=='')
        {
            $pos = strrpos($file,'.');
            if(!$pos)
                $this->Error('Image file has no extension and no type was specified: '.$file);
            $type = substr($file,$pos+1);
        }
        $type = strtolower($type);
        if($type=='jpeg')
            $type = 'jpg';
        $mtd = '_parse'.$type;
        if(!method_exists($this,$mtd))
            $this->Error('Unsupported image type: '.$type);
        $info = $this->$mtd($file);
        $info['i'] = count($this->images)+1;
        $this->images[$file] = $info;
    }
    else
        $info = $this->images[$file];  

if($w==0 && $h==0)  
{  
    $w = $info['w']/$this->k;  
    $h = $info['h']/$this->k;  
}  
elseif($w==0)  
    $w = $h*$info['w']/$info['h'];  
elseif($h==0)  
    $h = $w*$info['h']/$info['w'];  

if($x===null)  
    $x = $this->x;  
if($y===null)  
{  
    if($this->y+$h>$this->PageBreakTrigger && !$this->InHeader && !$this->InFooter && $this->AcceptPageBreak())  
    {  
        $x2 = $this->x;  
        $this->AddPage($this->CurOrientation,$this->CurPageSize,$this->CurRotation);  
        $this->x = $x2;  
    }  
    $y = $this->y;  
    $this->y += $h;  
}  

if($x<$this->lMargin)  
    $x = $this->lMargin;  
if($y<$this->tMargin)  
    $y = $this->tMargin;  
if($x+$w>$this->w-$this->rMargin)  
    $w = $this->w-$this->rMargin-$x;  
if($y+$h>$this->h-$this->bMargin)  
    $h = $this->h-$this->bMargin-$y;  

$this->_out(sprintf('q %.2F 0 0 %.2F %.2F %.2F cm /I%d Do Q',$w*$this->k,$h*$this->k,$x*$this->k,($this->h-($y+$h))*$this->k,$info['i']));  
if($link)  
    $this->Link($x,$y,$w,$h,$link);  

}  
function GetStringWidth($s)
{
    if(!isset($this->CurrentFont))
        $this->Error('No font has been set');
    $cw = &$this->CurrentFont['cw'];
    $w = 0;
    $l = strlen($s);
    for($i=0;$i<$l;$i++)
        $w += $cw[$s[$i]];
    return $w*$this->FontSize/1000;
}  
function SetX($x)
{
    if($x>=0)
        $this->x = $x;
    else
        $this->x = $this->w+$x;
    if($this->x<$this->lMargin)
        $this->x = $this->lMargin;
}  
function SetY($y, $resetX=true)
{
    if($y>=0)
        $this->y = $y;
    else
        $this->y = $this->h+$y;
    if($this->y<$this->tMargin)
        $this->y = $this->tMargin;
    if($resetX)
        $this->x = $this->lMargin;
}  
function SetXY($x, $y)
{
    $this->SetX($x);
    $this->SetY($y,false);
}  
function Output($dest='', $name='', $isUTF8=false)
{
    if($this->state<3)
        $this->Close();
    $dest = strtoupper($dest);
    if($dest=='')
    {
        if($name=='')
        {
            $name = 'doc.pdf';
            $dest = 'I';
        }
        else
            $dest = 'F';
    }
    switch($dest)
    {
        case 'I':
            $this->_checkoutput();
            header('Content-Type: application/pdf');
            header('Content-Disposition: inline; filename="'.$name.'"');
            header('Cache-Control: private, max-age=0, must-revalidate');
            header('Pragma: public');
            echo $this->buffer;
            break;
        case 'D':
            $this->_checkoutput();
            header('Content-Type: application/pdf');
            header('Content-Disposition: attachment; filename="'.$name.'"');
            header('Cache-Control: private, max-age=0, must-revalidate');
            header('Pragma: public');
            echo $this->buffer;
            break;
        case 'F':
            $f = fopen($name,'wb');
            if(!$f)
                $this->Error('Unable to create output file: '.$name);
            fwrite($f,$this->buffer,strlen($this->buffer));
            fclose($f);
            break;
        case 'S':
            return $this->buffer;
        default:
            $this->Error('Incorrect output destination: '.$dest);
    }
    return '';
}  
/******************************************************************************  
Protected methods                                                          *
******************************************************************************/
function _dochecks()
{
  if(ini_get('zend.ze1_compatibility_mode'))
  $this->Error('This script cannot run in Zend Engine v1 compatibility mode');
  if(PHP_VERSION_ID<50300 && !function_exists('mb_strlen'))
  $this->Error('The mbstring extension is required with PHP < 5.3');

}  
function _checkoutput()
{
    if(PHP_SAPI!='cli')
    {
        if(headers_sent($file,$line))
            $this->Error("Some data has already been output, can't send PDF file (output started at $file:$line)");
    }
    if(ob_get_length())
    {
        ob_end_clean();
        $this->Error("Some data has already been output, can't send PDF file (output buffering not ended)");
    }
}  
function _getpagesize($size)
{
    if(is_string($size))
    {
        $size = strtolower($size);
        if(!array_key_exists($size,$this->StdPageSizes))
            $this->Error('Unknown page size: '.$size);
        $a = $this->StdPageSizes[$size];
        return array($a[0]/$this->k, $a[1]/$this->k);
    }
    else
    {
        if($size[0]>$size[1])
            return array($size[1],$size[0]);
        else
            return $size;
    }
}  
function _beginpage($orientation, $size, $rotation)
{
    $this->page++;
    $this->pages[$this->page] = '';
    $this->PageLinks[$this->page] = array();
    $this->state = 2;
    $this->x = $this->lMargin;
    $this->y = $this->tMargin;
    $this->FontFamily = '';
    if($orientation=='')
        $orientation = $this->DefOrientation;
    else
        $orientation = strtoupper($orientation[0]);
    if($size=='')
        $size = $this->DefPageSize;
    else
        $size = $this->_getpagesize($size);
    if($orientation!=$this->CurOrientation || $size[0]!=$this->CurPageSize[0] || $size[1]!=$this->CurPageSize[1])
    {
        if($orientation=='P')
        {
            $this->w = $size[0];
            $this->h = $size[1];
        }
        else
        {
            $this->w = $size[1];
            $this->h = $size[0];
        }
        $this->wPt = $this->w*$this->k;
        $this->hPt = $this->h*$this->k;
        $this->PageBreakTrigger = $this->h-$this->bMargin;
        $this->CurOrientation = $orientation;
        $this->CurPageSize = $size;
    }
    if($rotation!=0)
    {
        $rotation = $rotation%360;
        if($rotation<0)
            $rotation += 360;
        $this->CurRotation = $rotation;
    }
    else
        $this->CurRotation = 0;
}  
function _endpage()
{
    $this->state = 1;
}  
function _loadfont($font)
{
    include($this->fontpath.$font);
    $a = get_defined_vars();
    if(!isset($a['name']))
        $this->Error('Could not include font definition file');
    return $a;
}  
function _escape($s)
{
    $s = str_replace('\','\\',$s);
    $s = str_replace('(','\(',$s);
    $s = str_replace(')','\)',$s);
    return $s;
}  
function _textstring($s)
{
    return '('.$this->_escape($s).')';
}  
function _UTF8toUTF16($s)
{
    $res = "\xFE\xFF";
    $nb = strlen($s);
    $i = 0;
    while($i<$nb)
    {
        $c1 = ord($s[$i++]);
        if($c1>=224)
        {
            $c2 = ord($s[$i++]);
            $c3 = ord($s[$i++]);
            $res .= chr((($c1 & 0x0F)<<4) + (($c2 & 0x3C)>>2));
            $res .= chr((($c2 & 0x03)<<6) + ($c3 & 0x3F));
        }
        elseif($c1>=192)
        {
            $c2 = ord($s[$i++]);
            $res .= chr(($c1 & 0x1C)>>2));
            $res .= chr((($c1 & 0x03)<<6) + ($c2 & 0x3F));
        }
        else
        {
            $res .= "\0".chr($c1);
        }
    }
    return $res;
}  
function _dounderline($x, $y, $txt)
{
    $up = $this->CurrentFont['up'];
    $ut = $this->CurrentFont['ut'];
    $w = $this->GetStringWidth($txt)+$this->wssubstr_count($txt,' ');
    return sprintf('%.2F %.2F %.2F %.2F re f',$x$this->k,($this->h-($y-$up/1000*$this->FontSize))$this->k,$w$this->k,-$ut/1000*$this->FontSizePt);
}  
function _parsejpg($file)
{
    $a = getimagesize($file);
    if(!$a)
        $this->Error('Missing or incorrect image file: '.$file);
    if($a[2]!=2)
        $this->Error('Not a JPEG file: '.$file);
    $colspace = 'DeviceRGB';
    $bpc = isset($a['bits']) ? $a['bits'] : 8;
    $f = fopen($file,'rb');
    $data = fread($f,filesize($file));
    fclose($f);
    return array('w'=>$a[0], 'h'=>$a[1], 'cs'=>$colspace, 'bpc'=>$bpc, 'f'=>'DCTDecode', 'data'=>$data);
}  
function _parsepng($file)
{
    $f = fopen($file,'rb');
    if(!$f)
        $this->Error('Can't open image file: '.$file);
    $info = $this->_parsepngstream($f,$file);
    fclose($f);
    return $info;
}  
function _parsepngstream($f, $file)
{
    if($this->_readstream($f,8)!=chr(137).'PNG'.chr(13).chr(10).chr(26).chr(10))
        $this->Error('Not a PNG file: '.$file);  

$this->_readstream($f,4);  
if($this->_readstream($f,4)!='IHDR')  
    $this->Error('Incorrect PNG file: '.$file);  
$w = $this->_readint($f);  
$h = $this->_readint($f);  
$bpc = ord($this->_readstream($f,1));  
if($bpc>8)  
    $this->Error('16-bit depth not supported: '.$file);  
$ct = ord($this->_readstream($f,1));  
if($ct==0 || $ct==4)  
    $colspace = 'DeviceGray';  
elseif($ct==2 || $ct==6)  
    $colspace = 'DeviceRGB';  
elseif($ct==3)  
    $colspace = 'Indexed';  
else  
    $this->Error('Unknown color type: '.$file);  
if(ord($this->_readstream($f,1))!=0)  
    $this->Error('Unknown compression method: '.$file);  
if(ord($this->_readstream($f,1))!=0)  
    $this->Error('Unknown filter method: '.$file);  
if(ord($this->_readstream($f,1))!=0)  
    $this->Error('Interlacing not supported: '.$file);  
$this->_readstream($f,4);  
$dp = '/Predictor 15 /Colors '.($colspace=='DeviceRGB' ? 3 : 1).' /BitsPerComponent '.$bpc.' /Columns '.$w;  

$pal = '';  
$trns = '';  
$data = '';  
do  
{  
    $n = $this->_readint($f);  
    $type = $this->_readstream($f,4);  
    if($type=='PLTE')  
    {  
        $pal = $this->_readstream($f,$n);  
        $this->_readstream($f,4);  
    }  
    elseif($type=='tRNS')  
    {  
        $t = $this->_readstream($f,$n);  
        if($ct==0)  
            $trns = array(ord(substr($t,1,1)));  
        elseif($ct==2)  
            $trns = array(ord(substr($t,1,1)),ord(substr($t,3,1)),ord(substr($t,5,1)));  
        else  
        {  
            $pos = strpos($t,chr(0));  
            if($pos!==false)  
                $trns = array($pos);  
        }  
        $this->_readstream($f,4);  
    }  
    elseif($type=='IDAT')  
    {  
        $data .= $this->_readstream($f,$n);  
        $this->_readstream($f,4);  
    }  
    elseif($type=='IEND')  
        break;  
    else  
        $this->_readstream($f,$n+4);  
}  
while($n);  

if($colspace=='Indexed' && empty($pal))  
    $this->Error('Missing palette in '.$file);  
$info = array('w'=>$w, 'h'=>$h, 'cs'=>$colspace, 'bpc'=>$bpc, 'f'=>'FlateDecode', 'dp'=>$dp, 'pal'=>$pal, 'trns'=>$trns);  
if($ct>=4)  
{  
    if(!function_exists('gzuncompress'))  
        $this->Error('Zlib not available, can\'t handle alpha channel: '.$file);  
    $data = gzuncompress($data);  
    $color = '';  
    $alpha = '';  
    if($ct==4)  
    {  
        for($i=0;$i<$h;$i++)  
        {  
            $pos = (1+$w)*$i;  
            $color .= $data[$pos];  
            $alpha .= $data[$pos];  
            $line = substr($data,$pos+1,$w);  
            $color .= preg_replace('/(.)./s','$1',$line);  
            $alpha .= preg_replace('/.(.)/s','$1',$line);  
        }  
    }  
    else  
    {  
        for($i=0;$i<$h;$i++)  
        {  
            $pos = (1+4*$w)*$i;  
            $color .= $data[$pos];  
            $alpha .= $data[$pos];  
            $line = substr($data,$pos+1,4*$w);  
            $color .= preg_replace('/(.{3})./s','$1',$line);  
            $alpha .= preg_replace('/.{3}(.)/s','$1',$line);  
        }  
    }  
    $info['smask'] = $alpha;  
    $info['data'] = $color;  
}  
else  
    $info['data'] = $data;  
return $info;  

}  
function _readstream($f, $n)
{
    $res = '';
    while($n>0 && !feof($f))
    {
        $s = fread($f,$n);
        if($s===false)
            $this->Error('Error while reading stream');
        $n -= strlen($s);
        $res .= $s;
    }
    if($n>0)
        $this->Error('Unexpected end of stream');
    return $res;
}  
function _readint($f)
{
    $a = unpack('Ni',$this->_readstream($f,4));
    return $a['i'];
}  
function _enddoc()
{
    $this->_putheader();
    $this->_putpages();
    $this->_putresources();
    $this->_newobj();
    $this->_put('<< /Producer '.$this->_textstring('FPDF '.FPDF_VERSION));
    if(!empty($this->metadata))
    {
        $this->_put('/Info <<');
        foreach($this->metadata as $key=>$value)
            $this->_put('/'.$key.' '.$this->_textstring($value));
        $this->_put('>>');
    }
    $this->_put('/Size '.($this->n+1));
    $this->_put('/Root '.$this->n.' 0 R');
    $this->_put('>>');
    $this->_put('startxref');
    $this->_put(strlen($this->buffer));
    $this->_put('%%EOF');
    $this->state = 3;
}  
function _putheader()
{
    $this->_put('%PDF-'.$this->PDFVersion);
}  
function _putpages()
{
    $nb = $this->page;
    if(!empty($this->AliasNbPages))
    {
        $alias = $this->_UTF8toUTF16($this->AliasNbPages);
        for($n=1;$n<=$nb;$n++)
            $this->pages[$n] = str_replace($this->AliasNbPages,$nb,$this->pages[$n]);
    }
    for($n=1;$n<=$nb;$n++)
    {
        $this->_newobj();
        $this->_put('<</Type /Page');
        $this->_put('/Parent 1 0 R');
        if(isset($this->PageInfo[$n]['size']))
            $this->_put(sprintf('/MediaBox [0 0 %.2F %.2F]',$this->PageInfo[$n]['size'][0],$this->PageInfo[$n]['size'][1]));
        if(isset($this->PageInfo[$n]['rotation']))
            $this->_put('/Rotate '.$this->PageInfo[$n]['rotation']);
        $this->_put('/Resources 2 0 R');
        if(!empty($this->PageLinks[$n]))
        {
            $s = '/Annots [';
            foreach($this->PageLinks[$n] as $pl)
                $s .= sprintf('%d 0 R ',$pl[4]);
            $s .= ']';
            $this->_put($s);
        }
        $this->_put('/Contents '.($this->n+1).' 0 R>>');
        $this->_put('endobj');
        $this->_newobj();
        $this->_put('<<');
        if($this->compress)
            $this->_put('/Filter /FlateDecode');
        $this->_putstream($this->pages[$n]);
        $this->_put('>>');
        $this->_put('endobj');
    }
    $this->_newobj();
    $this->offsets[1] = strlen($this->buffer);
    $this->_put('<< /Type /Pages');
    $kids = '/Kids [';
    for($n=1;$n<=$nb;$n++)
        $kids .= (3+2*($n-1)).' 0 R ';
    $kids .= ']';
    $this->_put($kids);
    $this->_put('/Count '.$nb);
    $this->_put(sprintf('/MediaBox [0 0 %.2F %.2F]',$this->DefPageSize[0]$this->k,$this->DefPageSize[1]$this->k));
    $this->_put('>>');
    $this->_put('endobj');
}  
function _putresources()
{
    $this->_putfonts();
    $this->_putimages();
    $this->_newobj();
    $this->offsets[2] = strlen($this->buffer);
    $this->_put('<<');
    $this->_put('/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]');
    $this->_put('/Font <<');
    foreach($this->fonts as $f)
        $this->_put('/F'.$f['i'].' '.$f['n'].' 0 R');
    $this->_put('>>');
    $this->_put('/XObject <<');
    foreach($this->images as $image)
        $this->_put('/I'.$image['i'].' '.$image['n'].' 0 R');
    $this->_put('>>');
    $this->_put('>>');
    $this->_put('endobj');
}  
function _putfonts()
{
    foreach($this->FontFiles as $file=>$info)
    {
        $this->_newobj();
        $this->_put('<</Length '.$info['length1']);
        if(isset($info['length2']))
            $this->_put('/Length1 '.$info['length1'].' /Length2 '.$info['length2'].' /Length3 0');
        $this->_put('/Filter /FlateDecode');
        $this->_put('>>');
        $f = fopen($this->fontpath.$file,'rb');
        $data = fread($f,$info['length1']);
        fclose($f);
        $this->_putstream($data);
        $this->_put('endobj');
    }
    foreach($this->fonts as $k=>$font)
    {
        $this->_newobj();
        $this->fonts[$k]['n'] = $this->n;
        $this->_put('<</Type /Font');
        $this->_put('/BaseFont /'.$font['name']);
        $this->_put('/Subtype /Type1');
        if($font['name']!='Symbol' && $font['name']!='ZapfDingbats')
            $this->_put('/Encoding /WinAnsiEncoding');
        if(isset($font['file']))
            $this->_put('/FontDescriptor '.($this->n+1).' 0 R');
        $this->_put('>>');
        $this->_put('endobj');
        if(isset($font['file']))
        {
            $this->_newobj();
            $this->_put('<</Length '.$font['length1']);
            $this->_put('/Filter /FlateDecode');
            $this->_put('>>');
            $f = fopen($this->fontpath.$font['file'],'rb');
            $data = fread($f,$font['length1']);
            fclose($f);
            $this->_putstream($data);
            $this->_put('endobj');
        }
    }
}  
function _putimages()
{
    foreach(array_keys($this->images) as $file)
    {
        $this->_newobj();
        $info = $this->images[$file];
        $this->images[$file]['n'] = $this->n;
        $this->_put('<</Type /XObject');
        $this->_put('/Subtype /Image');
        $this->_put('/Width '.$info['w']);
        $this->_put('/Height '.$info['h']);
        if($info['cs']=='Indexed')
            $this->_put('/ColorSpace [/Indexed /DeviceRGB '.(strlen($info['pal'])/3-1).' '.($this->n+1).' 0 R]');
        else
        {
            $this->_put('/ColorSpace /'.$info['cs']);
            if($info['cs']=='DeviceCMYK')
                $this->_put('/Decode [1 0 1 0 1 0 1 0]');
        }
        $this->_put('/BitsPerComponent '.$info['bpc']);
        if(isset($info['f']))
            $this->_put('/Filter /'.$info['f']);
        if(isset($info['dp']))
            $this->_put('/DecodeParms <<'.$info['dp'].'>>');
        if(isset($info['trns']) && is_array($info['trns']))
        {
            $trns = '';
            for($i=0;$i<count($info['trns']);$i++)
                $trns .= $info['trns'][$i].' '.$info['trns'][$i].' ';
            $this->_put('/Mask ['.$trns.']');
        }
        if(isset($info['smask']))
            $this->_put('/SMask '.($this->n+1).' 0 R');
        $this->_put('/Length '.strlen($info['data']));
        $this->_put('>>');
        $this->_putstream($info['data']);
        $this->_put('endobj');
        if(isset($info['smask']))
        {
            $this->_newobj();
            $this->_put('<<');
            $this->_put('/Type /XObject');
            $this->_put('/Subtype /Image');
            $this->_put('/Width '.$info['w']);
            $this->_put('/Height '.$info['h']);
            $this->_put('/ColorSpace /DeviceGray');
            $this->_put('/BitsPerComponent '.$info['bpc']);
            if(isset($info['f']))
                $this->_put('/Filter /'.$info['f']);
            $this->_put('/Length '.strlen($info['smask']));
            $this->_put('>>');
            $this->_putstream($info['smask']);
            $this->_put('endobj');
        }
    }
}  
function _putstream($data)
{
    if($this->compress)
        $data = gzcompress($data);
    $this->_put('stream');
    $this->_put($data);
    $this->_put('endstream');
}  
function _newobj($n=null)
{
    if($n===null)
        $n = ++$this->n;
    $this->offsets[$n] = strlen($this->buffer);
    $this->_put($n.' 0 obj');
}  
function _put($s)
{
    $this->buffer .= $s."\n";
}  
}
?>  
File: RedLionSalvageAi/fpdf186/fpdf.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/RedLionSalvageAi/fpdf186/fpdf.php]
<?php
/*******************************************************************************  
FPDF                                                                         *  

                                                                         *  

Version: 1.86                                                                *  

Date:    2023-06-25                                                          *  

Author:  Olivier PLATHEY                                                     *
*******************************************************************************/

define('FPDF_VERSION','1.86');  
class FPDF
{
protected $page;
protected $n;
protected $offsets;
protected $buffer;
protected $pages;
protected $state;
protected $compress;
protected $k;
protected $DefOrientation;
protected $CurOrientation;
protected $StdPageSizes;
protected $DefPageSize;
protected $CurPageSize;
protected $CurRotation;
protected $PageInfo;
protected $wPt, $hPt;
protected $w, $h;
protected $lMargin;
protected $tMargin;
protected $rMargin;
protected $bMargin;
protected $cMargin;
protected $x, $y;
protected $lasth;
protected $LineWidth;
protected $fontpath;
protected $CoreFonts;
protected $fonts;
protected $FontFiles;
protected $encodings;
protected $cmaps;
protected $FontFamily;
protected $FontStyle;
protected $underline;
protected $CurrentFont;
protected $FontSizePt;
protected $FontSize;
protected $DrawColor;
protected $FillColor;
protected $TextColor;
protected $ColorFlag;
protected $WithAlpha;
protected $ws;
protected $images;
protected $PageLinks;
protected $links;
protected $AutoPageBreak;
protected $PageBreakTrigger;
protected $InHeader;
protected $InFooter;
protected $AliasNbPages;
protected $ZoomMode;
protected $LayoutMode;
protected $metadata;
protected $CreationDate;
protected $PDFVersion;  
function __construct($orientation='P', $unit='mm', $size='A4')
{
    $this->state = 0;
    $this->page = 0;
    $this->n = 2;
    $this->buffer = '';
    $this->pages = array();
    $this->PageLinks = array();
    $this->offsets = array();
    $this->fonts = array();
    $this->FontFiles = array();
    $this->images =

