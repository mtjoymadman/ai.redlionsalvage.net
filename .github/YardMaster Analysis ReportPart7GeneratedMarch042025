# YardMaster Analysis ReportPart7GeneratedMarch042025
Generated: March 04, 2025

## Repository Structure
[Full structure here - truncated for brevity]

## File Contents

### File: ./.git/hooks/fsmonitor-watchman.sample
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/./.git/hooks/fsmonitor-watchman.sample]
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

---
### File: ./.git/logs/HEAD
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/./.git/logs/HEAD]
0000000000000000000000000000000000000000 b286157a8695291932e20de1407cf527d67d8ca7 runner <runner@fv-az1720-137.5vs45zvnpbiehoyyevf2d3pjfe.cx.internal.cloudapp.net> 1741047289 +0000	checkout: moving from master to main

---
### File: ./.github/YardMaster Analysis ReportPart1GeneratedMarch032025
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/./.github/YardMaster Analysis ReportPart1GeneratedMarch032025]
# YardMaster Analysis ReportPart1GeneratedMarch042025  
Generated: March 03, 2025  

## Repository Structure  
ai.redlionsalvage.net/  
├── .gitignore  
├── LICENSE  
├── README.md  
├── composer.json  
├── composer.lock  
├── index.php  
├── test_deployment.txt  
├── .github/  
│   ├── workflows/  
│   │   ├── deploy.yml  
│   ├── YardMaster_Analysis_Report.md  
├── ai.redlionsalvage.net/  
│   ├── api/  
│   │   ├── employee_management/  
│   │   │   ├── add_employee.php  
│   │   │   ├── delete_employee.php  
│   │   │   ├── get_employees.php  
│   │   │   ├── suspend_employee.php  
│   │   │   ├── update_employee.php  
│   │   ├── fleet/  
│   │   │   ├── add_vehicle.php  
│   │   │   ├── assign_driver.php  
│   │   │   ├── check expirations.php  
│   │   │   ├── get_driver_history.php  
│   │   │   ├── get_fleet_vehicles.php  
│   │   │   ├── ocr_receipt.py  
│   │   │   ├── update_mileage.php  
│   │   │   ├── upload_document.php  
│   │   │   ├── upload_receipt.php  
│   │   ├── inventory/  
│   │   │   ├── get_parts.php  
│   │   │   ├── get_vehicles.php  
│   │   ├── pos/  
│   │   │   ├── open_drawer.php  
│   │   │   ├── print_receipt.php  
│   │   │   ├── record_sale.php  
│   │   ├── scrap/  
│   │   │   ├── record_purchase.php  
│   │   ├── timeclock/  
│   │   │   ├── add_extra_time.php  
│   │   │   ├── end_break.php  
│   │   │   ├── get_employee_status.php  
│   │   │   ├── get_extra_time.php  
│   │   │   ├── get_time_log.php  
│   │   │   ├── get_time_status.php  
│   │   │   ├── get_yardman_stats.php  
│   │   │   ├── log_extra_time.php  
│   │   │   ├── start_break.php  
│   │   ├── vehicle_pickup/  
│   │   │   ├── get_pending_vehicles.php  
│   │   │   ├── process_pending.php  
│   │   │   ├── submit_pending.php  
│   │   ├── config.php  
│   │   ├── employee.php  
│   │   ├── get_user_roles.php  
│   │   ├── login.php  
│   │   ├── logout.php  
│   │   ├── timeclock.php  
│   │   ├── vehicle_mangement.php  
├── api/  
│   ├── employee_management/  
│   │   ├── add_employee.php  
│   │   ├── delete_employee.php  
│   │   ├── get_employees.php  
│   │   ├── suspend_employee.php  
│   │   ├── update_employee.php  
│   ├── fleet/  
│   │   ├── add_vehicle.php  
│   │   ├── assign_driver.php  
│   │   ├── check expirations.php  
│   │   ├── documents.php  
│   │   ├── get_driver_history.php  
│   │   ├── get_fleet_vehicles.php  
│   │   ├── ocr_receipt.py  
│   │   ├── update_mileage.php  
│   │   ├── upload_document.php  
│   │   ├── upload_receipt.php  
│   │   ├── vehicles.php  
├── database/  
│   ├── schema.sql  
[Truncated—full structure as you provided]  

## File Contents  

### Shared Server Environment
Generated from `phpinfo()` on March 05, 2025, updated March 06, 2025:
- **PHP Version**: 8.3.17
- **System**: Linux `web26.us.cloudlogin.co`, kernel 5.10.233-xeon-hst #1 SMP Fri Jan 10 12:38:21 UTC 2025 x86_64
- **Server API**: CGI/FastCGI
- **Hostname**: `web26.us.cloudlogin.co` (mapped to `ai.redlionsalvage.net` domain)
- **Relevant Modules**:
  - **FTP**: Enabled (`--enable-ftp`, supports FTPS)
  - **cURL**: Enabled (`--with-curl=/usr/local/curl/`, cURL 7.61.1)
  - **OpenSSL**: Enabled (`--with-openssl`, OpenSSL 1.1.1k FIPS)
  - **MySQL**: `pdo_mysql`, `mysqli` (matches `config.php`, MySQLnd 8.3.17)
- **Configuration**:
  - PHP.ini Path: `/home/sys/php8.3/php.ini`
  - Upload Limits: `upload_max_filesize=100M`, `post_max_size=8M`
  - Default Socket: `/var/run/mysqld/mysqld.sock`
- **Deployment Details**:
  - **FTP Host**: `web26.us.cloudlogin.co` (confirmed via run #163, March 06, 2025)
  - **FTP Path**: `/home/salvageyard/public_html/ai.redlionsalvage.net` (username `salvageyard`, confirmed via run #165)
  - **Secrets**: `FTP_HOST`, `FTP_USERNAME` (length 33, e.g., `salvageyard@ai.redlionsalvage.net`), `FTP_PASSWORD` (length 8)
  - **Method**: `lftp` with passive mode, excludes `.git*`, `.github/`, `.gitignore`, `composer.lock`
  - **Status**: Deployment succeeded in run #165 (March 06, 2025, 3m 27s)
- **Notes**: 
  - No SSH support (no `ssh2` module)—initial SSH attempts failed (run #160).
  - FTP deployment fixed by installing `lftp` (run #165) after hostname correction from `ai.redlionsalvage.net`.

### File: .github/workflows/deploy.yml  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/.github/workflows/deploy.yml]  
name: Deploy to Server  
on:  
  push:  
    branches:  
      - main  
jobs:  
  deploy:  
    runs-on: ubuntu-latest  
    steps:  
      - uses: actions/checkout@v2  
      - name: Install lftp  
        run: |  
          sudo apt-get update  
          sudo apt-get install -y lftp  
      - name: Deploy to Server via FTP  
        env:  
          FTP_HOST: ${{ secrets.FTP_HOST }}  
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}  
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}  
          FTP_REMOTE_DIR: /home/salvageyard/public_html/ai.redlionsalvage.net  
        run: |  
          echo "Deploying to $FTP_HOST"  
          lftp -u "$FTP_USERNAME,$FTP_PASSWORD" "$FTP_HOST" <<EOF  
          set ftp:passive-mode true  
          mirror -R --exclude-glob .git* --exclude-glob .github/ --exclude .gitignore --exclude composer.lock ./ $FTP_REMOTE_DIR  
          quit  
          EOF  
          echo "Deployment complete"  
---

### File: api/auth.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/auth.php]  
<?php  
session_start();  

if (!isset($_SESSION['user_id'])) {  
    header('HTTP/1.1 401 Unauthorized');  
    echo json_encode(['error' => 'Not authenticated']);  
    exit();  
}  
?>

### File: api/employee_management/add_employee.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/employee_management/add_employee.php]  
<?php  
session_start();  
require_once '../../config.php';  

if ($_SESSION['role'] !== 'admin') {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

if ($_SERVER['REQUEST_METHOD'] == 'POST') {  
    $username = $_POST['username'];  
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);  
    $first_name = $_POST['first_name'];  
    $last_name = $_POST['last_name'];  
    $email = $_POST['email'];  
    $phone = $_POST['phone'];  
    $role = $_POST['role'];  

    $stmt = $pdo->prepare("INSERT INTO employees (username, password, first_name, last_name, email, phone, role) VALUES (?, ?, ?, ?, ?, ?, ?)");  
    $success = $stmt->execute([$username, $password, $first_name, $last_name, $email, $phone, $role]);  

    if ($success) {  
        echo json_encode(['success' => 'Employee added']);  
    } else {  
        echo json_encode(['error' => 'Failed to add employee']);  
    }  
}  
?>

### File: api/employee_management/delete_employee.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/employee_management/delete_employee.php]  
<?php  
session_start();  
require_once '../../config.php';  

if ($_SESSION['role'] !== 'admin') {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

if ($_SERVER['REQUEST_METHOD'] == 'POST') {  
    $employee_id = $_POST['employee_id'];  

    $stmt = $pdo->prepare("DELETE FROM employees WHERE id = ?");  
    $success = $stmt->execute([$employee_id]);  

    if ($success) {  
        echo json_encode(['success' => 'Employee deleted']);  
    } else {  
        echo json_encode(['error' => 'Failed to delete employee']);  
    }  
}  
?>

### File: api/employee_management/get_employees.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/employee_management/get_employees.php]  
<?php  
session_start();  
require_once '../../config.php';  

if ($_SESSION['role'] !== 'admin') {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

$stmt = $pdo->prepare("SELECT id, username, first_name, last_name, email, phone, role, status FROM employees");  
$stmt->execute();  
$employees = $stmt->fetchAll(PDO::FETCH_ASSOC);  

echo json_encode($employees);  
?>

### File: api/employee_management/suspend_employee.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/employee_management/suspend_employee.php]  
<?php  
session_start();  
require_once '../../config.php';  

if ($_SESSION['role'] !== 'admin') {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

if ($_SERVER['REQUEST_METHOD'] == 'POST') {  
    $employee_id = $_POST['employee_id'];  
    $status = $_POST['status']; // 'active', 'suspended', 'terminated'  

    $stmt = $pdo->prepare("UPDATE employees SET status = ? WHERE id = ?");  
    $success = $stmt->execute([$status, $employee_id]);  

    if ($success) {  
        echo json_encode(['success' => 'Employee status updated']);  
    } else {  
        echo json_encode(['error' => 'Failed to update employee status']);  
    }  
}  
?>

### File: api/employee_management/update_employee.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/employee_management/update_employee.php]  
<?php  
session_start();  
require_once '../../config.php';  

if ($_SESSION['role'] !== 'admin') {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

if ($_SERVER['REQUEST_METHOD'] == 'POST') {  
    $employee_id = $_POST['employee_id'];  
    $first_name = $_POST['first_name'];  
    $last_name = $_POST['last_name'];  
    $email = $_POST['email'];  
    $phone = $_POST['phone'];  
    $role = $_POST['role'];  

    $stmt = $pdo->prepare("UPDATE employees SET first_name = ?, last_name = ?, email = ?, phone = ?, role = ?, updated_at = NOW() WHERE id = ?");  
    $success = $stmt->execute([$first_name, $last_name, $email, $phone, $role, $employee_id]);  

    if ($success) {  
        echo json_encode(['success' => 'Employee updated']);  
    } else {  
        echo json_encode(['error' => 'Failed to update employee']);  
    }  
}  
?>

### File: api/fleet/add_vehicle.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/fleet/add_vehicle.php]  
<?php  
session_start();  
require_once '../../config.php';  

if (!in_array($_SESSION['role'], ['admin', 'driver'])) {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

if ($_SERVER['REQUEST_METHOD'] == 'POST') {  
    $vin = $_POST['vin'];  
    $make = $_POST['make'];  
    $model = $_POST['model'];  
    $year = $_POST['year'];  
    $license_plate = $_POST['license_plate'];  

    $stmt = $pdo->prepare("INSERT INTO vehicles (vin, make, model, year, license_plate) VALUES (?, ?, ?, ?, ?)");  
    $success = $stmt->execute([$vin, $make, $model, $year, $license_plate]);  

    if ($success) {  
        echo json_encode(['success' => 'Vehicle added']);  
    } else {  
        echo json_encode(['error' => 'Failed to add vehicle']);  
    }  
}  
?>

### File: api/fleet/assign_driver.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/fleet/assign_driver.php]  
<?php  
session_start();  
require_once '../../config.php';  

if ($_SESSION['role'] !== 'admin') {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

if ($_SERVER['REQUEST_METHOD'] == 'POST') {  
    $vehicle_id = $_POST['vehicle_id'];  
    $driver_id = $_POST['driver_id'];  

    $stmt = $pdo->prepare("UPDATE vehicles SET driver_id = ?, updated_at = NOW() WHERE id = ?");  
    $success = $stmt->execute([$driver_id, $vehicle_id]);  

    if ($success) {  
        echo json_encode(['success' => 'Driver assigned']);  
    } else {  
        echo json_encode(['error' => 'Failed to assign driver']);  
    }  
}  
?>

### File: api/fleet/check expirations.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/fleet/check expirations.php]  
<?php  
session_start();  
require_once '../../config.php';  

if (!in_array($_SESSION['role'], ['admin', 'driver'])) {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

$stmt = $pdo->prepare("SELECT id, vin, make, model, last_inspection FROM vehicles WHERE last_inspection < DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND driver_id IS NOT NULL");  
$stmt->execute();  
$expired = $stmt->fetchAll(PDO::FETCH_ASSOC);  

echo json_encode($expired);  
?>

### File: api/fleet/get_driver_history.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/fleet/get_driver_history.php]  
<?php  
session_start();  
require_once '../../config.php';  

if (!in_array($_SESSION['role'], ['admin', 'driver'])) {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

$driver_id = $_GET['driver_id'] ?? $_SESSION['user_id'];  
$stmt = $pdo->prepare("SELECT v.vin, v.make, v.model, v.year FROM vehicles v WHERE v.driver_id = ?");  
$stmt->execute([$driver_id]);  
$history = $stmt->fetchAll(PDO::FETCH_ASSOC);  

echo json_encode($history);  
?>

### File: api/fleet/get_fleet_vehicles.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/fleet/get_fleet_vehicles.php]  
<?php  
session_start();  
require_once '../../config.php';  

if (!in_array($_SESSION['role'], ['admin', 'driver'])) {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

$stmt = $pdo->prepare("SELECT v.id, v.vin, v.make, v.model, v.year, v.status, v.last_inspection, e.first_name, e.last_name FROM vehicles v LEFT JOIN employees e ON v.driver_id = e.id");  
$stmt->execute();  
$vehicles = $stmt->fetchAll(PDO::FETCH_ASSOC);  

echo json_encode($vehicles);  
?>

### File: api/fleet/ocr_receipt.py  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/fleet/ocr_receipt.py]  
import pytesseract  
from PIL import Image  
import os  

def ocr_receipt(image_path):  
    try:  
        img = Image.open(image_path)  
        text = pytesseract.image_to_string(img)  
        return {"success": True, "text": text}  
    except Exception as e:  
        return {"success": False, "error": str(e)}  

if __name__ == "__main__":  
    import sys  
    if len(sys.argv) > 1:  
        result = ocr_receipt(sys.argv[1])  
        print(result)  
---

### File: api/fleet/update_mileage.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/fleet/update_mileage.php]  
<?php  
session_start();  
require_once '../../config.php';  

if (!in_array($_SESSION['role'], ['admin', 'driver'])) {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

if ($_SERVER['REQUEST_METHOD'] == 'POST') {  
    $vehicle_id = $_POST['vehicle_id'];  
    $mileage = $_POST['mileage'];  

    $stmt = $pdo->prepare("UPDATE vehicles SET mileage = ? WHERE id = ?");  
    $success = $stmt->execute([$mileage, $vehicle_id]);  

    if ($success) {  
        echo json_encode(['success' => 'Mileage updated']);  
    } else {  
        echo json_encode(['error' => 'Failed to update mileage']);  
    }  
}  
?>

### File: api/fleet/upload_document.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/fleet/upload_document.php]  
<?php  
session_start();  
require_once '../../config.php';  

if (!in_array($_SESSION['role'], ['admin', 'driver'])) {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_FILES['document'])) {  
    $vehicle_id = $_POST['vehicle_id'];  
    $file = $_FILES['document'];  
    $upload_dir = '../../uploads/documents/';  
    $file_name = $vehicle_id . '_' . time() . '_' . basename($file['name']);  
    $target_path = $upload_dir . $file_name;  

    if (move_uploaded_file($file['tmp_name'], $target_path)) {  
        echo json_encode(['success' => 'Document uploaded', 'path' => $file_name]);  
    } else {  
        echo json_encode(['error' => 'Failed to upload document']);  
    }  
} else {  
    echo json_encode(['error' => 'No file uploaded']);  
}  
?>

### File: api/fleet/upload_receipt.php  
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/fleet/upload_receipt.php]  
<?php  
session_start();  
require_once '../../config.php';  

if (!in_array($_SESSION['role'], ['admin', 'driver'])) {  
    echo json_encode(['error' => 'Unauthorized']);  
    exit();  
}  

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_FILES['receipt'])) {  
    $vehicle_id = $_POST['vehicle_id'];  
    $file = $_FILES['receipt'];  
    $upload_dir = '../../uploads/receipts/';  
    $file_name = $vehicle_id . '_' . time() . '_' . basename($file['name']);  
    $target_path = $upload_dir . $file_name;  

    if (move_uploaded_file($file['tmp_name'], $target_path)) {  
        echo json_encode(['success' => 'Receipt uploaded', 'path' => $file_name]);  
    } else {  
        echo json_encode(['error' => 'Failed to upload receipt']);  
    }  
} else {  
    echo json_encode(['error' => 'No file uploaded']);  
}  
?>

Continued in YardMaster Analysis ReportPart2GeneratedMarch032025  

---
