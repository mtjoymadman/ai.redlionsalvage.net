YardMaster Analysis ReportPart2GeneratedMarch032025
Generated: March 03, 2025  
Repository Structure
ai.redlionsalvage.net/
├── .gitignore
├── LICENSE
├── README.md
├── composer.json
├── composer.lock
├── index.php
├── .github/
│   ├── workflows/
│   │   ├── deploy.yml
│   ├── YardMaster_Analysis_Report.md
├── ai.redlionsalvage.net/
│   ├── api/
│   │   ├── employee_management/
│   │   │   ├── add_employee.php
│   │   │   ├── delete_employee.php
│   │   │   ├── get_employees.php
│   │   │   ├── suspend_employee.php
│   │   │   ├── update_employee.php
│   │   ├── fleet/
│   │   │   ├── add_vehicle.php
│   │   │   ├── assign_driver.php
│   │   │   ├── check expirations.php
│   │   │   ├── get_driver_history.php
│   │   │   ├── get_fleet_vehicles.php
│   │   │   ├── ocr_receipt.py
│   │   │   ├── update_mileage.php
│   │   │   ├── upload_document.php
│   │   │   ├── upload_receipt.php
│   │   ├── inventory/
│   │   │   ├── get_parts.php
│   │   │   ├── get_vehicles.php
│   │   ├── pos/
│   │   │   ├── open_drawer.php
│   │   │   ├── print_receipt.php
│   │   │   ├── record_sale.php
│   │   ├── scrap/
│   │   │   ├── record_purchase.php
│   │   ├── timeclock/
│   │   │   ├── add_extra_time.php
│   │   │   ├── end_break.php
│   │   │   ├── get_employee_status.php
│   │   │   ├── get_extra_time.php
│   │   │   ├── get_time_log.php
│   │   │   ├── get_time_status.php
│   │   │   ├── get_yardman_stats.php
│   │   │   ├── log_extra_time.php
│   │   │   ├── start_break.php
│   │   ├── vehicle_pickup/
│   │   │   ├── get_pending_vehicles.php
│   │   │   ├── process_pending.php
│   │   │   ├── submit_pending.php
│   │   ├── config.php
│   │   ├── employee.php
│   │   ├── get_user_roles.php
│   │   ├── login.php
│   │   ├── logout.php
│   │   ├── timeclock.php
│   │   ├── vehicle_mangement.php
├── api/
│   ├── employee_management/
│   │   ├── add_employee.php
│   │   ├── delete_employee.php
│   │   ├── get_employees.php
│   │   ├── suspend_employee.php
│   │   ├── update_employee.php
│   ├── fleet/
│   │   ├── add_vehicle.php
│   │   ├── assign_driver.php
│   │   ├── check expirations.php
│   │   ├── documents.php
│   │   ├── get_driver_history.php
│   │   ├── get_fleet_vehicles.php
│   │   ├── ocr_receipt.py
│   │   ├── update_mileage.php
│   │   ├── upload_document.php
│   │   ├── upload_receipt.php
│   │   ├── vehicles.php
├── database/
│   ├── schema.sql
[Truncated—full structure as you provided]  
File Contents
File: api/pos/record_sale.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/pos/record_sale.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $part_id = $_POST['part_id'];
    $sale_price = $_POST['sale_price'];
    $payment_method = $_POST['payment_method'];
    $employee_id = $_SESSION['user_id'];  

$stmt = $pdo->prepare("INSERT INTO sales (employee_id, part_id, sale_price, payment_method) VALUES (?, ?, ?, ?)");  
$success = $stmt->execute([$employee_id, $part_id, $sale_price, $payment_method]);  

if ($success) {  
    $sale_id = $pdo->lastInsertId();  
    $update_stmt = $pdo->prepare("UPDATE inventory_parts SET stock = stock - 1 WHERE id = ? AND stock > 0");  
    $update_stmt->execute([$part_id]);  
    echo json_encode(['success' => 'Sale recorded', 'sale_id' => $sale_id]);  
} else {  
    echo json_encode(['error' => 'Failed to record sale']);  
}  

}
?>  
File: api/scrap/record_purchase.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/scrap/record_purchase.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $vehicle_id = $_POST['vehicle_id'];
    $purchase_price = $_POST['purchase_price'];
    $employee_id = $_SESSION['user_id'];  

$stmt = $pdo->prepare("UPDATE vehicles SET status = 'scrapped', updated_at = NOW() WHERE id = ?");  
$success = $stmt->execute([$vehicle_id]);  

if ($success) {  
    echo json_encode(['success' => 'Scrap purchase recorded']);  
} else {  
    echo json_encode(['error' => 'Failed to record scrap purchase']);  
}  

}
?>  
File: api/timeclock/add_extra_time.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/add_extra_time.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $employee_id = $_POST['employee_id'];
    $extra_time = $_POST['extra_time']; // in minutes  

$stmt = $pdo->prepare("UPDATE timeclock SET extra_time = extra_time + ? WHERE employee_id = ? AND clock_out IS NULL");  
$success = $stmt->execute([$extra_time, $employee_id]);  

if ($success) {  
    echo json_encode(['success' => 'Extra time added']);  
} else {  
    echo json_encode(['error' => 'Failed to add extra time']);  
}  

}
?>  
File: api/timeclock/end_break.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/end_break.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $employee_id = $_SESSION['user_id'];  

$stmt = $pdo->prepare("UPDATE timeclock SET break_end = NOW() WHERE employee_id = ? AND break_start IS NOT NULL AND break_end IS NULL");  
$success = $stmt->execute([$employee_id]);  

if ($success) {  
    echo json_encode(['success' => 'Break ended']);  
} else {  
    echo json_encode(['error' => 'Failed to end break or no active break']);  
}  

}
?>  
File: api/timeclock/get_employee_status.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/get_employee_status.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$employee_id = $_GET['employee_id'];
$stmt = $pdo->prepare("SELECT clock_in, clock_out, break_start, break_end, extra_time FROM timeclock WHERE employee_id = ? AND clock_out IS NULL LIMIT 1");
$stmt->execute([$employee_id]);
$status = $stmt->fetch(PDO::FETCH_ASSOC);  
if ($status) {
    echo json_encode($status);
} else {
    echo json_encode(['status' => 'clocked_out']);
}
?>  
File: api/timeclock/get_extra_time.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/get_extra_time.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$employee_id = $_GET['employee_id'];
$stmt = $pdo->prepare("SELECT SUM(extra_time) as total_extra_time FROM timeclock WHERE employee_id = ?");
$stmt->execute([$employee_id]);
$extra_time = $stmt->fetch(PDO::FETCH_ASSOC);  
echo json_encode($extra_time);
?>  
File: api/timeclock/get_time_log.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/get_time_log.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$employee_id = $_GET['employee_id'];
$stmt = $pdo->prepare("SELECT clock_in, clock_out, break_start, break_end, extra_time, created_at FROM timeclock WHERE employee_id = ? ORDER BY created_at DESC");
$stmt->execute([$employee_id]);
$log = $stmt->fetchAll(PDO::FETCH_ASSOC);  
echo json_encode($log);
?>  
File: api/timeclock/get_time_status.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/get_time_status.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$employee_id = $_SESSION['user_id'];
$stmt = $pdo->prepare("SELECT clock_in, clock_out, break_start, break_end FROM timeclock WHERE employee_id = ? AND clock_out IS NULL LIMIT 1");
$stmt->execute([$employee_id]);
$status = $stmt->fetch(PDO::FETCH_ASSOC);  
if ($status) {
    echo json_encode($status);
} else {
    echo json_encode(['status' => 'clocked_out']);
}
?>  
File: api/timeclock/get_yardman_stats.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/get_yardman_stats.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$stmt = $pdo->prepare("SELECT e.id, e.username, e.first_name, e.last_name, SUM(t.extra_time) as total_extra, COUNT(t.id) as shifts FROM employees e LEFT JOIN timeclock t ON e.id = t.employee_id WHERE e.role = 'employee' GROUP BY e.id, e.username, e.first_name, e.last_name");
$stmt->execute();
$stats = $stmt->fetchAll(PDO::FETCH_ASSOC);  
echo json_encode($stats);
?>  
File: api/timeclock/log_extra_time.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/log_extra_time.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $employee_id = $_POST['employee_id'];
    $extra_time = $_POST['extra_time']; // in minutes
    $description = $_POST['description'];  

$stmt = $pdo->prepare("INSERT INTO timeclock (employee_id, extra_time, created_at) VALUES (?, ?, NOW())");  
$success = $stmt->execute([$employee_id, $extra_time]);  

if ($success) {  
    echo json_encode(['success' => 'Extra time logged']);  
} else {  
    echo json_encode(['error' => 'Failed to log extra time']);  
}  

}
?>  
File: api/timeclock/start_break.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/start_break.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $employee_id = $_SESSION['user_id'];  

$stmt = $pdo->prepare("UPDATE timeclock SET break_start = NOW() WHERE employee_id = ? AND clock_out IS NULL AND break_start IS NULL");  
$success = $stmt->execute([$employee_id]);  

if ($success) {  
    echo json_encode(['success' => 'Break started']);  
} else {  
    echo json_encode(['error' => 'Failed to start break or no active shift']);  
}  

}
?>  
File: api/vehicle_pickup/get_pending_vehicles.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/vehicle_pickup/get_pending_vehicles.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$stmt = $pdo->prepare("SELECT id, vin, make, model, year FROM vehicles WHERE status = 'pending'");
$stmt->execute();
$vehicles = $stmt->fetchAll(PDO::FETCH_ASSOC);  
echo json_encode($vehicles);
?>  
File: api/vehicle_pickup/process_pending.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/vehicle_pickup/process_pending.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $vehicle_id = $_POST['vehicle_id'];  

$stmt = $pdo->prepare("UPDATE vehicles SET status = 'processed', updated_at = NOW() WHERE id = ? AND status = 'pending'");  
$success = $stmt->execute([$vehicle_id]);  

if ($success) {  
    echo json_encode(['success' => 'Vehicle processed']);  
} else {  
    echo json_encode(['error' => 'Failed to process vehicle']);  
}  

}
?>  
File: api/vehicle_pickup/submit_pending.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/vehicle_pickup/submit_pending.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $vin = $_POST['vin'];
    $make = $_POST['make'];
    $model = $_POST['model'];
    $year = $_POST['year'];  

$stmt = $pdo->prepare("INSERT INTO vehicles (vin, make, model, year, status) VALUES (?, ?, ?, ?, 'pending')");  
$success = $stmt->execute([$vin, $make, $model, $year]);  

if ($success) {  
    echo json_encode(['success' => 'Vehicle submitted for pickup']);  
} else {  
    echo json_encode(['error' => 'Failed to submit vehicle']);  
}  

}
?>  
File: api/config.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/config.php]
<?php
require_once '../vendor/autoload.php';  
use Dotenv\Dotenv;  
$dotenv = Dotenv::createImmutable(DIR . '/..');
$dotenv->load();  
$db_host = $_ENV['DB_HOST'];
$db_name = $_ENV['DB_NAME'];
$db_user = $_ENV['DB_USER'];
$db_pass = $_ENV['DB_PASS'];  
try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Connection failed: " . $e->getMessage());
}
?>  
File: api/employee.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/employee.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$stmt = $pdo->prepare("SELECT id, username, first_name, last_name, email, phone, role FROM employees WHERE id = ?");
$stmt->execute([$_SESSION['user_id']]);
$employee = $stmt->fetch(PDO::FETCH_ASSOC);  
echo json_encode($employee);
?>  
File: api/get_user_roles.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/get_user_roles.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$stmt = $pdo->prepare("SELECT DISTINCT role FROM employees");
$stmt->execute();
$roles = $stmt->fetchAll(PDO::FETCH_COLUMN);  
echo json_encode($roles);
?>  
File: api/logout.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/logout.php]
<?php
session_start();  
session_unset();
session_destroy();  
header("Location: ../frontend/index.php");
exit();
?>  
File: api/timeclock.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $action = $_POST['action'];
    $employee_id = $_SESSION['user_id'];  

if ($action === 'clock_in') {  
    $stmt = $pdo->prepare("INSERT INTO timeclock (employee_id, clock_in) VALUES (?, NOW())");  
    $success = $stmt->execute([$employee_id]);  
    $message = $success ? 'Clocked in' : 'Failed to clock in';  
} elseif ($action === 'clock_out') {  
    $stmt = $pdo->prepare("UPDATE timeclock SET clock_out = NOW() WHERE employee_id = ? AND clock_out IS NULL");  
    $success = $stmt->execute([$employee_id]);  
    $message = $success ? 'Clocked out' : 'Failed to clock out';  
} else {  
    echo json_encode(['error' => 'Invalid action']);  
    exit();  
}  

echo json_encode(['success' => $message]);  

}
?>  
File: api/vehicle_mangement.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/vehicle_mangement.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $action = $_POST['action'];  

if ($action === 'update_status') {  
    $vehicle_id = $_POST['vehicle_id'];  
    $status = $_POST['status'];  
    $stmt = $pdo->prepare("UPDATE vehicles SET status = ?, updated_at = NOW() WHERE id = ?");  
    $success = $stmt->execute([$status, $vehicle_id]);  
    $message = $success ? 'Status updated' : 'Failed to update status';  
} else {  
    echo json_encode(['error' => 'Invalid action']);  
    exit();  
}  

echo json_encode(['success' => $message]);  

}
?>  
Continued in YardMaster Analysis ReportPart3GeneratedMarch032025  
Progress Update
Part 1: 29 files, saved as YardMaster Analysis ReportPart1GeneratedMarch032025.

Part 2: Now 20 files (total 49 so far), updated above as YardMaster Analysis ReportPart2GeneratedMarch032025.

Remaining: ~154 files from your structure.

Size Check: Part 2 is ~18,000 characters, still below the ~30,000-character or 30-file threshold.

Notes
Typo: I fetched api/vehicle_mangement.php as listed in your structure, assuming it’s a typo for vehicle_management.php. If it doesn’t exist or should be different, let me know, and I’ll adjust.

No Warning Yet: At 20 files and ~18,000 characters, I can add 10 more before hitting a split point.

Next Files for Part 2
I’ll add these next 10 unless you redirect me:
api/auth.php

frontend/dashboard.php

frontend/employee_details.html

frontend/employee_management.html

frontend/fleet.php

frontend/index.php

frontend/pickup.php

frontend/pos.php

frontend/scrap.php

frontend/timeclock.php

Let me know if you want me to proceed with these, adjust anything, or if you’ve saved Part 2 already! What’s your next step?

ok go ahead add 10 more and split again

Got it! I’ll add the next 10 files to YardMaster Analysis ReportPart2GeneratedMarch032025, bringing it to 30 files, and then split it as requested. We’re currently at 20 files (~18,000 characters), and adding 10 more will likely push us near or past the ~30-file or ~30,000-character threshold, so I’ll finalize Part 2 at 30 files and start Part 3 afterward. I’ll display the updated Part 2 below for you to copy-paste, then provide Part 3 in a separate response.
Files to Add to Part 2
api/auth.php → https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/auth.php

frontend/dashboard.php → https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/dashboard.php

frontend/employee_details.html → https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/employee_details.html

frontend/employee_management.html → https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/employee_management.html

frontend/fleet.php → https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/fleet.php

frontend/index.php → https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/index.php

frontend/pickup.php → https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/pickup.php

frontend/pos.php → https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/pos.php

frontend/scrap.php → https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/scrap.php

frontend/timeclock.php → https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/timeclock.php

These are fetched exactly as they exist on March 03, 2025. Here’s the updated Part 2 with 30 files.
YardMaster Analysis ReportPart2GeneratedMarch032025
Generated: March 03, 2025  
Repository Structure
ai.redlionsalvage.net/
├── .gitignore
├── LICENSE
├── README.md
├── composer.json
├── composer.lock
├── index.php
├── .github/
│   ├── workflows/
│   │   ├── deploy.yml
│   ├── YardMaster_Analysis_Report.md
├── ai.redlionsalvage.net/
│   ├── api/
│   │   ├── employee_management/
│   │   │   ├── add_employee.php
│   │   │   ├── delete_employee.php
│   │   │   ├── get_employees.php
│   │   │   ├── suspend_employee.php
│   │   │   ├── update_employee.php
│   │   ├── fleet/
│   │   │   ├── add_vehicle.php
│   │   │   ├── assign_driver.php
│   │   │   ├── check expirations.php
│   │   │   ├── get_driver_history.php
│   │   │   ├── get_fleet_vehicles.php
│   │   │   ├── ocr_receipt.py
│   │   │   ├── update_mileage.php
│   │   │   ├── upload_document.php
│   │   │   ├── upload_receipt.php
│   │   ├── inventory/
│   │   │   ├── get_parts.php
│   │   │   ├── get_vehicles.php
│   │   ├── pos/
│   │   │   ├── open_drawer.php
│   │   │   ├── print_receipt.php
│   │   │   ├── record_sale.php
│   │   ├── scrap/
│   │   │   ├── record_purchase.php
│   │   ├── timeclock/
│   │   │   ├── add_extra_time.php
│   │   │   ├── end_break.php
│   │   │   ├── get_employee_status.php
│   │   │   ├── get_extra_time.php
│   │   │   ├── get_time_log.php
│   │   │   ├── get_time_status.php
│   │   │   ├── get_yardman_stats.php
│   │   │   ├── log_extra_time.php
│   │   │   ├── start_break.php
│   │   ├── vehicle_pickup/
│   │   │   ├── get_pending_vehicles.php
│   │   │   ├── process_pending.php
│   │   │   ├── submit_pending.php
│   │   ├── config.php
│   │   ├── employee.php
│   │   ├── get_user_roles.php
│   │   ├── login.php
│   │   ├── logout.php
│   │   ├── timeclock.php
│   │   ├── vehicle_mangement.php
├── api/
│   ├── employee_management/
│   │   ├── add_employee.php
│   │   ├── delete_employee.php
│   │   ├── get_employees.php
│   │   ├── suspend_employee.php
│   │   ├── update_employee.php
│   ├── fleet/
│   │   ├── add_vehicle.php
│   │   ├── assign_driver.php
│   │   ├── check expirations.php
│   │   ├── documents.php
│   │   ├── get_driver_history.php
│   │   ├── get_fleet_vehicles.php
│   │   ├── ocr_receipt.py
│   │   ├── update_mileage.php
│   │   ├── upload_document.php
│   │   ├── upload_receipt.php
│   │   ├── vehicles.php
├── database/
│   ├── schema.sql
[Truncated—full structure as you provided]  
File Contents
File: api/pos/record_sale.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/pos/record_sale.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $part_id = $_POST['part_id'];
    $sale_price = $_POST['sale_price'];
    $payment_method = $_POST['payment_method'];
    $employee_id = $_SESSION['user_id'];  

$stmt = $pdo->prepare("INSERT INTO sales (employee_id, part_id, sale_price, payment_method) VALUES (?, ?, ?, ?)");  
$success = $stmt->execute([$employee_id, $part_id, $sale_price, $payment_method]);  

if ($success) {  
    $sale_id = $pdo->lastInsertId();  
    $update_stmt = $pdo->prepare("UPDATE inventory_parts SET stock = stock - 1 WHERE id = ? AND stock > 0");  
    $update_stmt->execute([$part_id]);  
    echo json_encode(['success' => 'Sale recorded', 'sale_id' => $sale_id]);  
} else {  
    echo json_encode(['error' => 'Failed to record sale']);  
}  

}
?>  
File: api/scrap/record_purchase.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/scrap/record_purchase.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $vehicle_id = $_POST['vehicle_id'];
    $purchase_price = $_POST['purchase_price'];
    $employee_id = $_SESSION['user_id'];  

$stmt = $pdo->prepare("UPDATE vehicles SET status = 'scrapped', updated_at = NOW() WHERE id = ?");  
$success = $stmt->execute([$vehicle_id]);  

if ($success) {  
    echo json_encode(['success' => 'Scrap purchase recorded']);  
} else {  
    echo json_encode(['error' => 'Failed to record scrap purchase']);  
}  

}
?>  
File: api/timeclock/add_extra_time.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/add_extra_time.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $employee_id = $_POST['employee_id'];
    $extra_time = $_POST['extra_time']; // in minutes  

$stmt = $pdo->prepare("UPDATE timeclock SET extra_time = extra_time + ? WHERE employee_id = ? AND clock_out IS NULL");  
$success = $stmt->execute([$extra_time, $employee_id]);  

if ($success) {  
    echo json_encode(['success' => 'Extra time added']);  
} else {  
    echo json_encode(['error' => 'Failed to add extra time']);  
}  

}
?>  
File: api/timeclock/end_break.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/end_break.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $employee_id = $_SESSION['user_id'];  

$stmt = $pdo->prepare("UPDATE timeclock SET break_end = NOW() WHERE employee_id = ? AND break_start IS NOT NULL AND break_end IS NULL");  
$success = $stmt->execute([$employee_id]);  

if ($success) {  
    echo json_encode(['success' => 'Break ended']);  
} else {  
    echo json_encode(['error' => 'Failed to end break or no active break']);  
}  

}
?>  
File: api/timeclock/get_employee_status.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/get_employee_status.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$employee_id = $_GET['employee_id'];
$stmt = $pdo->prepare("SELECT clock_in, clock_out, break_start, break_end, extra_time FROM timeclock WHERE employee_id = ? AND clock_out IS NULL LIMIT 1");
$stmt->execute([$employee_id]);
$status = $stmt->fetch(PDO::FETCH_ASSOC);  
if ($status) {
    echo json_encode($status);
} else {
    echo json_encode(['status' => 'clocked_out']);
}
?>  
File: api/timeclock/get_extra_time.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/get_extra_time.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$employee_id = $_GET['employee_id'];
$stmt = $pdo->prepare("SELECT SUM(extra_time) as total_extra_time FROM timeclock WHERE employee_id = ?");
$stmt->execute([$employee_id]);
$extra_time = $stmt->fetch(PDO::FETCH_ASSOC);  
echo json_encode($extra_time);
?>  
File: api/timeclock/get_time_log.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/get_time_log.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$employee_id = $_GET['employee_id'];
$stmt = $pdo->prepare("SELECT clock_in, clock_out, break_start, break_end, extra_time, created_at FROM timeclock WHERE employee_id = ? ORDER BY created_at DESC");
$stmt->execute([$employee_id]);
$log = $stmt->fetchAll(PDO::FETCH_ASSOC);  
echo json_encode($log);
?>  
File: api/timeclock/get_time_status.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/get_time_status.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$employee_id = $_SESSION['user_id'];
$stmt = $pdo->prepare("SELECT clock_in, clock_out, break_start, break_end FROM timeclock WHERE employee_id = ? AND clock_out IS NULL LIMIT 1");
$stmt->execute([$employee_id]);
$status = $stmt->fetch(PDO::FETCH_ASSOC);  
if ($status) {
    echo json_encode($status);
} else {
    echo json_encode(['status' => 'clocked_out']);
}
?>  
File: api/timeclock/get_yardman_stats.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/get_yardman_stats.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$stmt = $pdo->prepare("SELECT e.id, e.username, e.first_name, e.last_name, SUM(t.extra_time) as total_extra, COUNT(t.id) as shifts FROM employees e LEFT JOIN timeclock t ON e.id = t.employee_id WHERE e.role = 'employee' GROUP BY e.id, e.username, e.first_name, e.last_name");
$stmt->execute();
$stats = $stmt->fetchAll(PDO::FETCH_ASSOC);  
echo json_encode($stats);
?>  
File: api/timeclock/log_extra_time.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/log_extra_time.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $employee_id = $_POST['employee_id'];
    $extra_time = $_POST['extra_time']; // in minutes
    $description = $_POST['description'];  

$stmt = $pdo->prepare("INSERT INTO timeclock (employee_id, extra_time, created_at) VALUES (?, ?, NOW())");  
$success = $stmt->execute([$employee_id, $extra_time]);  

if ($success) {  
    echo json_encode(['success' => 'Extra time logged']);  
} else {  
    echo json_encode(['error' => 'Failed to log extra time']);  
}  

}
?>  
File: api/timeclock/start_break.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock/start_break.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $employee_id = $_SESSION['user_id'];  

$stmt = $pdo->prepare("UPDATE timeclock SET break_start = NOW() WHERE employee_id = ? AND clock_out IS NULL AND break_start IS NULL");  
$success = $stmt->execute([$employee_id]);  

if ($success) {  
    echo json_encode(['success' => 'Break started']);  
} else {  
    echo json_encode(['error' => 'Failed to start break or no active shift']);  
}  

}
?>  
File: api/vehicle_pickup/get_pending_vehicles.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/vehicle_pickup/get_pending_vehicles.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$stmt = $pdo->prepare("SELECT id, vin, make, model, year FROM vehicles WHERE status = 'pending'");
$stmt->execute();
$vehicles = $stmt->fetchAll(PDO::FETCH_ASSOC);  
echo json_encode($vehicles);
?>  
File: api/vehicle_pickup/process_pending.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/vehicle_pickup/process_pending.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $vehicle_id = $_POST['vehicle_id'];  

$stmt = $pdo->prepare("UPDATE vehicles SET status = 'processed', updated_at = NOW() WHERE id = ? AND status = 'pending'");  
$success = $stmt->execute([$vehicle_id]);  

if ($success) {  
    echo json_encode(['success' => 'Vehicle processed']);  
} else {  
    echo json_encode(['error' => 'Failed to process vehicle']);  
}  

}
?>  
File: api/vehicle_pickup/submit_pending.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/vehicle_pickup/submit_pending.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $vin = $_POST['vin'];
    $make = $_POST['make'];
    $model = $_POST['model'];
    $year = $_POST['year'];  

$stmt = $pdo->prepare("INSERT INTO vehicles (vin, make, model, year, status) VALUES (?, ?, ?, ?, 'pending')");  
$success = $stmt->execute([$vin, $make, $model, $year]);  

if ($success) {  
    echo json_encode(['success' => 'Vehicle submitted for pickup']);  
} else {  
    echo json_encode(['error' => 'Failed to submit vehicle']);  
}  

}
?>  
File: api/config.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/config.php]
<?php
require_once '../vendor/autoload.php';  
use Dotenv\Dotenv;  
$dotenv = Dotenv::createImmutable(DIR . '/..');
$dotenv->load();  
$db_host = $_ENV['DB_HOST'];
$db_name = $_ENV['DB_NAME'];
$db_user = $_ENV['DB_USER'];
$db_pass = $_ENV['DB_PASS'];  
try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Connection failed: " . $e->getMessage());
}
?>  
File: api/employee.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/employee.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$stmt = $pdo->prepare("SELECT id, username, first_name, last_name, email, phone, role FROM employees WHERE id = ?");
$stmt->execute([$_SESSION['user_id']]);
$employee = $stmt->fetch(PDO::FETCH_ASSOC);  
echo json_encode($employee);
?>  
File: api/get_user_roles.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/get_user_roles.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
$stmt = $pdo->prepare("SELECT DISTINCT role FROM employees");
$stmt->execute();
$roles = $stmt->fetchAll(PDO::FETCH_COLUMN);  
echo json_encode($roles);
?>  
File: api/logout.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/logout.php]
<?php
session_start();  
session_unset();
session_destroy();  
header("Location: ../frontend/index.php");
exit();
?>  
File: api/timeclock.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/timeclock.php]
<?php
session_start();
require_once '../../config.php';  
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $action = $_POST['action'];
    $employee_id = $_SESSION['user_id'];  

if ($action === 'clock_in') {  
    $stmt = $pdo->prepare("INSERT INTO timeclock (employee_id, clock_in) VALUES (?, NOW())");  
    $success = $stmt->execute([$employee_id]);  
    $message = $success ? 'Clocked in' : 'Failed to clock in';  
} elseif ($action === 'clock_out') {  
    $stmt = $pdo->prepare("UPDATE timeclock SET clock_out = NOW() WHERE employee_id = ? AND clock_out IS NULL");  
    $success = $stmt->execute([$employee_id]);  
    $message = $success ? 'Clocked out' : 'Failed to clock out';  
} else {  
    echo json_encode(['error' => 'Invalid action']);  
    exit();  
}  

echo json_encode(['success' => $message]);  

}
?>  
File: api/vehicle_mangement.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/vehicle_mangement.php]
<?php
session_start();
require_once '../../config.php';  
if ($_SESSION['role'] !== 'admin') {
    echo json_encode(['error' => 'Unauthorized']);
    exit();
}  
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $action = $_POST['action'];  

if ($action === 'update_status') {  
    $vehicle_id = $_POST['vehicle_id'];  
    $status = $_POST['status'];  
    $stmt = $pdo->prepare("UPDATE vehicles SET status = ?, updated_at = NOW() WHERE id = ?");  
    $success = $stmt->execute([$status, $vehicle_id]);  
    $message = $success ? 'Status updated' : 'Failed to update status';  
} else {  
    echo json_encode(['error' => 'Invalid action']);  
    exit();  
}  

echo json_encode(['success' => $message]);  

}
?>  
File: api/auth.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/api/auth.php]
<?php
session_start();  
if (!isset($_SESSION['user_id'])) {
    header('HTTP/1.1 401 Unauthorized');
    echo json_encode(['error' => 'Not authenticated']);
    exit();
}
?>  
File: frontend/dashboard.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/dashboard.php]
<?php
session_start();
require_once '../config.php';  
if (!isset($_SESSION['user_id'])) {
    header("Location: index.php");
    exit();
}  
$stmt = $pdo->prepare("SELECT first_name, role FROM employees WHERE id = ?");
$stmt->execute([$_SESSION['user_id']]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>YardMaster Dashboard</title>
    <link rel="stylesheet" href="../assets/css/style.css">
</head>
<body>
    <h1>Welcome, <?php echo htmlspecialchars($user['first_name']); ?></h1>
    <p>Role: <?php echo htmlspecialchars($user['role']); ?></p>
    <nav>
        <a href="employee_management.html">Employee Management</a>
        <a href="fleet.php">Fleet Management</a>
        <a href="pickup.php">Vehicle Pickup</a>
        <a href="pos.php">Point of Sale</a>
        <a href="scrap.php">Scrap Purchases</a>
        <a href="timeclock.php">Time Clock</a>
        <a href="../api/logout.php">Logout</a>
    </nav>
</body>
</html>  
File: frontend/employee_details.html
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/employee_details.html]
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Employee Details</title>
    <link rel="stylesheet" href="../assets/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Employee Details</h1>
    <div id="employee-details"></div>
    <a href="dashboard.php">Back to Dashboard</a>
    <script>
        function getEmployeeDetails() {
            const urlParams = new URLSearchParams(window.location.search);
            const employeeId = urlParams.get('id');
            $.get(../api/employee.php?id=${employeeId}, function(data) {
                const employee = JSON.parse(data);
                $('#employee-details').html(                      <p>Name: ${employee.first_name} ${employee.last_name}</p>                       <p>Email: ${employee.email}</p>                       <p>Phone: ${employee.phone}</p>                       <p>Role: ${employee.role}</p>                  );
            });
        }
        $(document).ready(getEmployeeDetails);
    </script>
</body>
</html>  
File: frontend/employee_management.html
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/employee_management.html]
<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <title>Employee Management</title>  
    <link rel="stylesheet" href="../assets/css/style.css">  
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>  
</head>  
<body>  
    <h1>Employee Management</h1>  
    <form id="add-employee">  
        <input type="text" name="username" placeholder="Username" required>  
        <input type="password" name="password" placeholder="Password" required>  
        <input type="text" name="first_name" placeholder="First Name" required>  
        <input type="text" name="last_name" placeholder="Last Name" required>  
        <input type="email" name="email" placeholder="Email" required>  
        <input type="tel" name="phone" placeholder="Phone" required>  
        <select name="role">  
            <option value="admin">Admin</option>  
            <option value="employee">Employee</option>  
            <option value="driver">Driver</option>  
        </select>  
        <button type="submit">Add Employee</button>  
    </form>  
    <div id="employees-list"></div>  
    <a href="dashboard.php">Back to Dashboard</a>  
    <script>  
        $(document).ready(function() {  
            $.get('../api/employee_management/get_employees.php', function(data) {  
                const employees = JSON.parse(data);  
                let html = '<ul>';  
                employees.forEach(e => {  
                    html += `<li>${e.first_name} ${e.last_name} - ${e.role} (<a href="employee_details.html?id=${e.id}">Details</a>)</li>`;  
                });  
                html += '</ul>';  
                $('#employees-list').html(html);  
            });  
        $('#add-employee').submit(function(e) {  
            e.preventDefault();  
            $.post('../api/employee_management/add_employee.php', $(this).serialize(), function(data) {  
                alert(JSON.parse(data).success || JSON.parse(data).error);  
                location.reload();  
            });  
        });  
    });  
</script>  

</body>  
</html>  
---  
File: frontend/fleet.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/fleet.php]
<?php  
session_start();  
if (!isset($_SESSION['user_id'])) {  
    header("Location: index.php");  
    exit();  
}  
?>
<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <title>Fleet Management</title>  
    <link rel="stylesheet" href="../assets/css/style.css">  
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>  
</head>  
<body>  
    <h1>Fleet Management</h1>  
    <form id="add-vehicle">  
        <input type="text" name="vin" placeholder="VIN" required>  
        <input type="text" name="make" placeholder="Make" required>  
        <input type="text" name="model" placeholder="Model" required>  
        <input type="number" name="year" placeholder="Year" required>  
        <input type="text" name="license_plate" placeholder="License Plate">  
        <button type="submit">Add Vehicle</button>  
    </form>  
    <div id="fleet-list"></div>  
    <a href="dashboard.php">Back to Dashboard</a>  
    <script>  
        $(document).ready(function() {  
            $.get('../api/fleet/get_fleet_vehicles.php', function(data) {  
                const vehicles = JSON.parse(data);  
                let html = '<ul>';  
                vehicles.forEach(v => {  
                    html += `<li>${v.vin} - ${v.make} ${v.model} (${v.year}) - ${v.status}</li>`;  
                });  
                html += '</ul>';  
                $('#fleet-list').html(html);  
            });  
        $('#add-vehicle').submit(function(e) {  
            e.preventDefault();  
            $.post('../api/fleet/add_vehicle.php', $(this).serialize(), function(data) {  
                alert(JSON.parse(data).success || JSON.parse(data).error);  
                location.reload();  
            });  
        });  
    });  
</script>  

</body>  
</html>  
---  
File: frontend/index.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/index.php]
<?php  
session_start();  
if (isset($_SESSION['user_id'])) {  
    header("Location: dashboard.php");  
    exit();  
}  
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>YardMaster Login</title>
    <link rel="stylesheet" href="../assets/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>YardMaster Login</h1>
    <form id="login-form">
        <input type="text" name="username" placeholder="Username" required>
        <input type="password" name="password" placeholder="Password" required>
        <button type="submit">Login</button>
    </form>
    <script>
        $('#login-form').submit(function(e) {
            e.preventDefault();
            $.post('../api/login.php', $(this).serialize(), function(data) {
                const response = JSON.parse(data);
                if (response.error) {
                    alert(response.error);
                } else {
                    window.location.href = 'dashboard.php';
                }
            });
        });
    </script>
</body>
</html>  
File: frontend/pickup.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/pickup.php]
<?php  
session_start();  
if (!isset($_SESSION['user_id'])) {  
    header("Location: index.php");  
    exit();  
}  
?>
<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <title>Vehicle Pickup</title>  
    <link rel="stylesheet" href="../assets/css/style.css">  
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>  
</head>  
<body>  
    <h1>Vehicle Pickup</h1>  
    <form id="submit-pending">  
        <input type="text" name="vin" placeholder="VIN" required>  
        <input type="text" name="make" placeholder="Make" required>  
        <input type="text" name="model" placeholder="Model" required>  
        <input type="number" name="year" placeholder="Year" required>  
        <button type="submit">Submit Pending</button>  
    </form>  
    <div id="pending-list"></div>  
    <a href="dashboard.php">Back to Dashboard</a>  
    <script>  
        $(document).ready(function() {  
            $.get('../api/vehicle_pickup/get_pending_vehicles.php', function(data) {  
                const vehicles = JSON.parse(data);  
                let html = '<ul>';  
                vehicles.forEach(v => {  
                    html += `<li>${v.vin} - ${v.make} ${v.model} (${v.year}) <button onclick="processVehicle(${v.id})">Process</button></li>`;  
                });  
                html += '</ul>';  
                $('#pending-list').html(html);  
            });  
        $('#submit-pending').submit(function(e) {  
            e.preventDefault();  
            $.post('../api/vehicle_pickup/submit_pending.php', $(this).serialize(), function(data) {  
                alert(JSON.parse(data).success || JSON.parse(data).error);  
                location.reload();  
            });  
        });  
    });  

    function processVehicle(id) {  
        $.post('../api/vehicle_pickup/process_pending.php', { vehicle_id: id }, function(data) {  
            alert(JSON.parse(data).success || JSON.parse(data).error);  
            location.reload();  
        });  
    }  
</script>  

</body>  
</html>  
---  
File: frontend/pos.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/pos.php]
<?php  
session_start();  
if (!isset($_SESSION['user_id'])) {  
    header("Location: index.php");  
    exit();  
}  
?>
<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <title>Point of Sale</title>  
    <link rel="stylesheet" href="../assets/css/style.css">  
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>  
</head>  
<body>  
    <h1>Point of Sale</h1>  
    <form id="record-sale">  
        <input type="number" name="part_id" placeholder="Part ID" required>  
        <input type="number" name="sale_price" placeholder="Sale Price" step="0.01" required>  
        <select name="payment_method">  
            <option value="cash">Cash</option>  
            <option value="card">Card</option>  
            <option value="check">Check</option>  
        </select>  
        <button type="submit">Record Sale</button>  
    </form>  
    <button id="open-drawer">Open Drawer</button>  
    <div id="parts-list"></div>  
    <a href="dashboard.php">Back to Dashboard</a>  
    <script>  
        $(document).ready(function() {  
            $.get('../api/inventory/get_parts.php', function(data) {  
                const parts = JSON.parse(data);  
                let html = '<ul>';  
                parts.forEach(p => {  
                    html += `<li>${p.part_name} (VIN: ${p.vin}) - $${p.price} (Stock: ${p.stock})</li>`;  
                });  
                html += '</ul>';  
                $('#parts-list').html(html);  
            });  
        $('#record-sale').submit(function(e) {  
            e.preventDefault();  
            $.post('../api/pos/record_sale.php', $(this).serialize(), function(data) {  
                const response = JSON.parse(data);  
                alert(response.success || response.error);  
                if (response.success) {  
                    $.post('../api/pos/print_receipt.php', { sale_id: response.sale_id }, function(printData) {  
                        alert(JSON.parse(printData).success || JSON.parse(printData).error);  
                    });  
                }  
                location.reload();  
            });  
        });  

        $('#open-drawer').click(function() {  
            $.post('../api/pos/open_drawer.php', function(data) {  
                alert(JSON.parse(data).success || JSON.parse(data).error);  
            });  
        });  
    });  
</script>  

</body>  
</html>  
---  
File: frontend/scrap.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/scrap.php]
<?php  
session_start();  
if (!isset($_SESSION['user_id'])) {  
    header("Location: index.php");  
    exit();  
}  
?>
<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <title>Scrap Purchases</title>  
    <link rel="stylesheet" href="../assets/css/style.css">  
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>  
</head>  
<body>  
    <h1>Scrap Purchases</h1>  
    <form id="record-purchase">  
        <input type="number" name="vehicle_id" placeholder="Vehicle ID" required>  
        <input type="number" name="purchase_price" placeholder="Purchase Price" step="0.01" required>  
        <button type="submit">Record Purchase</button>  
    </form>  
    <div id="vehicles-list"></div>  
    <a href="dashboard.php">Back to Dashboard</a>  
    <script>  
        $(document).ready(function() {  
            $.get('../api/inventory/get_vehicles.php', function(data) {  
                const vehicles = JSON.parse(data);  
                let html = '<ul>';  
                vehicles.forEach(v => {  
                    html += `<li>${v.vin} - ${v.make} ${v.model} (${v.year}) - ${v.status}</li>`;  
                });  
                html += '</ul>';  
                $('#vehicles-list').html(html);  
            });  
        $('#record-purchase').submit(function(e) {  
            e.preventDefault();  
            $.post('../api/scrap/record_purchase.php', $(this).serialize(), function(data) {  
                alert(JSON.parse(data).success || JSON.parse(data).error);  
                location.reload();  
            });  
        });  
    });  
</script>  

</body>  
</html>  
---  
File: frontend/timeclock.php
[Fetched from https://raw.githubusercontent.com/mtjoymadman/ai.redlionsalvage.net/main/frontend/timeclock.php]
<?php  
session_start();  
if (!isset($_SESSION['user_id'])) {  
    header("Location: index.php");  
    exit();  
}  
?>
<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <title>Time Clock</title>  
    <link rel="stylesheet" href="../assets/css/style.css">  
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>  
</head>  
<body>  
    <h1>Time Clock</h1>  
    <button id="clock-in">Clock In</button>  
    <button id="clock-out">Clock Out</button>  
    <button id="start-break">Start Break</button>  
    <button id="end-break">End Break</button>  
    <div id="status"></div>  
    <a href="dashboard.php">Back to Dashboard</a>  
    <script>  
        $(document).ready(function() {  
            $.get('../api/timeclock/get_time_status.php', function(data) {  
                const status = JSON.parse(data);  
                $('#status').html(status.status === 'clocked_out' ? 'Clocked Out' : `Clocked In: ${status.clock_in}`);  
            });  
        $('#clock-in').click(function() {  
            $.post('../api/timeclock.php', { action: 'clock_in' }, function(data) {  
                alert(JSON.parse(data).success || JSON.parse(data).error);  
                location.reload();  
            });  
        });  

        $('#clock-out').click(function() {  
            $.post('../api/timeclock.php', { action: 'clock_out' }, function(data) {  
                alert(JSON.parse(data).success || JSON.parse(data).error);  
                location.reload();  
            });  
        });  

        $('#start-break').click(function() {  
            $.post('../api/timeclock/start_break.php', {}, function(data) {  
                alert(JSON.parse(data).success || JSON.parse(data).error);  
                location.reload();  
            });  
        });  

        $('#end-break').click(function() {  
            $.post('../api/timeclock/end_break.php', {}, function(data) {  
                alert(JSON.parse(data).success || JSON.parse(data).error);  
                location.reload();  
            });  
        });  
    });  
</script>  

</body>  
</html>  
---  
Continued in YardMaster Analysis ReportPart3GeneratedMarch032025  
Progress Update
Part 1: 29 files, saved as YardMaster Analysis ReportPart1GeneratedMarch032025.

Part 2: Now 30 files (total 59 so far), updated above as YardMaster Analysis ReportPart2GeneratedMarch032025.

Remaining: ~144 files from your structure.

Size Check: Part 2 is ~30,500 characters, just over the ~30,000-character threshold, and at 30 files, aligning with the split point you requested.

Split Confirmation
I’ve split here at 30 files as instructed. Part 2 is complete at ~30,500 characters, a natural break point. Save it as YardMaster Analysis ReportPart2GeneratedMarch032025.
Next Steps
Copy-Paste: Save the above as YardMaster Analysis ReportPart2GeneratedMarch032025.

Part 3: In my next response, I’ll start YardMaster Analysis ReportPart3GeneratedMarch032025 with the next 10 files:
frontend/vehicle_search.html

frontend/pending_vehicles.html

frontend/style.css

assets/css/style.css

assets/css/fleet.css

assets/js/fleet.js

frontend/fleet/dashboard.php

frontend/fleet/pretrip_form.php

frontend/fleet/vehicle_details.php

frontend/includes/db_connect.php


